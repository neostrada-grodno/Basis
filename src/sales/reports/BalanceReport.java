/*
 * BalanceReport.java
 *
 * Created on 02.06.2011, 10:08:33
 */
package sales.reports;

import com.toedter.calendar.JDateChooser;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.jdesktop.application.Action;
import org.jopendocument.dom.spreadsheet.Sheet;
import org.jopendocument.dom.spreadsheet.SpreadSheet;
import sales.SalesApp;
import sales.SalesView;
import sales.interfaces.IClose;
import sales.util.HUtil;
import sales.util.Util;

public class BalanceReport extends javax.swing.JInternalFrame implements IClose {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());
    private BalanceReportTask balanceReportTask;
    boolean balanceReportRun;

    /** Creates new form BalanceReport */
    public BalanceReport(SalesView salesView) {

        initComponents();

        this.salesView = salesView;

        Util.initJIF(this, "Остатки и обороты", null, salesView);

        //End date
        Calendar c = Calendar.getInstance();

        endDate = new JDateChooser(c.getTime());

        endDate.getDateEditor().addPropertyChangeListener(
                new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        if ("date".equals(e.getPropertyName())) {
                            checkStartDate();
                        }
                    }
                });

        GroupLayout gl = (GroupLayout) jpEndDate.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(endDate)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(endDate)));

        //Start date
        c.set(Calendar.DATE, 1);
        startDate = new JDateChooser(c.getTime());

        startDate.getDateEditor().addPropertyChangeListener(
                new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        if ("date".equals(e.getPropertyName())) {
                            checkEndDate();
                        }
                    }
                });

        gl = (GroupLayout) jpStartDate.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(startDate)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(startDate)));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpStartDate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jpEndDate = new javax.swing.JPanel();
        jbExe = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();
        jlMsgs = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(BalanceReport.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jpStartDate.setName("jpStartDate"); // NOI18N

        javax.swing.GroupLayout jpStartDateLayout = new javax.swing.GroupLayout(jpStartDate);
        jpStartDate.setLayout(jpStartDateLayout);
        jpStartDateLayout.setHorizontalGroup(
            jpStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 93, Short.MAX_VALUE)
        );
        jpStartDateLayout.setVerticalGroup(
            jpStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jpEndDate.setName("jpEndDate"); // NOI18N

        javax.swing.GroupLayout jpEndDateLayout = new javax.swing.GroupLayout(jpEndDate);
        jpEndDate.setLayout(jpEndDateLayout);
        jpEndDateLayout.setHorizontalGroup(
            jpEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 85, Short.MAX_VALUE)
        );
        jpEndDateLayout.setVerticalGroup(
            jpEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 25, Short.MAX_VALUE)
        );

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(BalanceReport.class, this);
        jbExe.setAction(actionMap.get("balanceReport")); // NOI18N
        jbExe.setText(resourceMap.getString("jbExe.text")); // NOI18N
        jbExe.setName("jbExe"); // NOI18N

        jbClose.setAction(actionMap.get("closeReport")); // NOI18N
        jbClose.setText(resourceMap.getString("jbClose.text")); // NOI18N
        jbClose.setName("jbClose"); // NOI18N

        jlMsgs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlMsgs.setText(resourceMap.getString("jlMsgs.text")); // NOI18N
        jlMsgs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlMsgs.setName("jlMsgs"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlMsgs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbExe, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbClose, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpEndDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpStartDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlMsgs, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbExe)
                    .addComponent(jbClose))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void close() {
    }

    @Action
    public void closeReport() {
        Util.closeJIF(this, null, salesView);
        Util.closeJIFTab(this, salesView);
    }

    private class BalanceReportTask extends SwingWorker<Void, String> {

        private final SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yy");

        @Override
        protected Void doInBackground() {
            
            try {

                //Template
                File file = new File(Util.getAppPath() + "\\templates\\Balance.ods");
                final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);

                //Get the balance table
                Session session = HUtil.getSession();

                sheet.getCellAt("A2").setValue(
                        "Остатки и обороты за период с " + sdf.format(startDate.getDate())
                        + " по " + sdf.format(endDate.getDate()));

                publish("Запрос в базу данных");

                List tableIn = HUtil.getBalanceNomenclature(startDate.getDate(), endDate.getDate());

                //Prepare the table for printing
                long amount1 = 0;
                long amountIn = 0;
                long amountOut = 0;
                ArrayList tbl = new ArrayList();
                for (int i = 0; i < tableIn.size(); i++) {
                    Object[] row = (Object[]) tableIn.get(i);
                    int price = Util.getIntObj(row[1]);
                    int q1 = Util.getIntObj(row[2]) - Util.getIntObj(row[3]);
                    int a1 = q1 * price;
                    int qIn = Util.getIntObj(row[4]);
                    int aIn = qIn * price;
                    int qOut = Util.getIntObj(row[5]);
                    int aOut = qOut * price;
                    //If any value is nonzero, add the item to the list
                    if (q1 > 0 || qIn > 0 || qOut > 0) {
                        ArrayList newrow = new ArrayList();
                        newrow.add(row[0]);
                        newrow.add(q1);
                        newrow.add(a1);
                        newrow.add(qIn);
                        newrow.add(aIn);
                        newrow.add(qOut);
                        newrow.add(aOut);
                        tbl.add(newrow);

                        amount1 += a1;
                        amountIn += aIn;
                        amountOut += aOut;
                    }
                    publish("Запрос в базу данных, обработано " + (new DecimalFormat("#")).format(((double) i) * 100 / ((double) tableIn.size())) + "%");
                }

                publish("Создание отчета");

                //Prepare template by creating necessary number of lines
                int ts = tbl.size();
                if (ts > 1) {
                    sheet.duplicateRows(5, 1, ts - 1);
                }

                //Fill the template from the prepared table
                int i = 0;
                for (i = 0; i < ts; i++) {

                    ArrayList row = (ArrayList) tbl.get(i);
                    sheet.getCellAt("A" + (i + 6)).setValue(i + 1);
                    sheet.getCellAt("B" + (i + 6)).setValue(row.get(0));
                    sheet.getCellAt("C" + (i + 6)).setValue(row.get(1));
                    sheet.getCellAt("D" + (i + 6)).setValue(row.get(2));
                    sheet.getCellAt("E" + (i + 6)).setValue(row.get(3));
                    sheet.getCellAt("F" + (i + 6)).setValue(row.get(4));
                    sheet.getCellAt("G" + (i + 6)).setValue(row.get(5));
                    sheet.getCellAt("H" + (i + 6)).setValue(row.get(6));
                    int q = (Integer) row.get(1) + (Integer) row.get(3) - (Integer) row.get(5);
                    sheet.getCellAt("I" + (i + 6)).setValue(q);
                    if (q != 0) {
                        sheet.getCellAt("J" + (i + 6)).setValue(
                                (Integer) row.get(2) + (Integer) row.get(4) - (Integer) row.get(6));
                    } else {
                        sheet.getCellAt("J" + (i + 6)).setValue(0);
                    }
                    publish("Создание отчета, выведено " + (new DecimalFormat("#")).format(((double) i) * 100 / ((double) ts)) + "%");
                }

                sheet.getCellAt("D" + (i + 6)).setValue(amount1);
                sheet.getCellAt("F" + (i + 6)).setValue(amountIn);
                sheet.getCellAt("H" + (i + 6)).setValue(amountOut);
                sheet.getCellAt("J" + (i + 6)).setValue(amount1 + amountIn - amountOut);

                session.close();

                //Save the file, make sure the name is unique, open it
                String r = " " + Math.round(Math.random() * 100000);
                File outputFile = new File(
                        "temp\\Остатки и обороты с " + sdf.format(startDate.getDate())
                        + " по " + sdf.format(endDate.getDate())
                        + r + ".ods");
                sheet.getSpreadSheet().saveAs(outputFile);
                Util.openDoc(
                        "temp\\Остатки и обороты с " + sdf.format(startDate.getDate())
                        + " по " + sdf.format(endDate.getDate())
                        + r + ".ods");

            } catch (Exception e) {
                logger.error(e);
            }
            return null;
        }

        @Override
        protected void process(List<String> msgs) {
            for (int i = 0; i < msgs.size(); i++) {
                jlMsgs.setText(msgs.get(i));
            }
        }

        @Override
        protected void done() {
            balanceReportRun = false;
            jlMsgs.setText("Выполнен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }

        protected void cancel() {
            balanceReportRun = false;
            jlMsgs.setText("Остановлен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }
    }

    @Action
    public void balanceReport() {

        if (balanceReportRun) {
            int a = JOptionPane.showOptionDialog(
                    this, "Остановить создание отчета?",
                    "Остатки и обороты", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
            if (a == 0) {
                if (balanceReportTask.cancel(true)) {
                    balanceReportRun = false;
                    jlMsgs.setText("");
                    jbExe.setText("Сформировать");
                    jbClose.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(
                            this, "Невозможно прервать создание отчета!", "Остатки и обороты", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            balanceReportTask = new BalanceReportTask();
            balanceReportTask.execute();
            balanceReportRun = true;
            jbExe.setText("Отмена");
            jbClose.setEnabled(false);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbExe;
    private javax.swing.JLabel jlMsgs;
    private javax.swing.JPanel jpEndDate;
    private javax.swing.JPanel jpStartDate;
    // End of variables declaration//GEN-END:variables
    private JDateChooser startDate;
    private JDateChooser endDate;
    private SalesView salesView;

    //Sanity check when the initial date has been chosen
    private void checkStartDate() {

        if (startDate.getDate().after(endDate.getDate())) {
            Calendar c = Calendar.getInstance();
            c.setTime(startDate.getDate());
            c.add(Calendar.YEAR, -1);
            startDate.setDate(c.getTime());
        }
    }

    //Sanity check when the final date has been chosen
    private void checkEndDate() {

        if (startDate.getDate().after(endDate.getDate())) {
            Calendar c = Calendar.getInstance();
            c.setTime(endDate.getDate());
            c.add(Calendar.YEAR, 1);
            endDate.setDate(c.getTime());
        }
    }
}
