/*
 * Reconciliation.java
 *
 * Created on 28.09.2011, 14:52:46
 */
package sales.reports;

import com.toedter.calendar.JDateChooser;
import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.log4j.Logger;
import org.hibernate.classic.Session;
import org.jdesktop.application.Action;
import org.jopendocument.dom.spreadsheet.Sheet;
import org.jopendocument.dom.spreadsheet.SpreadSheet;
import sales.SalesApp;
import sales.SalesView;
import sales.catalogs.ContractorsView;
import sales.catalogs.SuppliersView;
import sales.entity.Contractors;
import sales.entity.Incoming;
import sales.entity.Outcoming;
import sales.entity.Outcomingpayments;
import sales.entity.Paymentorder;
import sales.entity.Suppliers;
import sales.interfaces.IClose;
import sales.interfaces.IContractor;
import sales.interfaces.ISupplier;
import sales.util.HUtil;
import sales.util.Util;

public class Reconciliation extends javax.swing.JInternalFrame implements IContractor, ISupplier, IClose {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());
    private ReconciliationReportTask reconciliationReportTask;
    boolean reconciliationReportRun;

    /** Creates new form Reconciliation */
    public Reconciliation(SalesView salesView) {

        initComponents();

        this.salesView = salesView;

        Util.initJIF(this, "Акт сверки", salesView, salesView);

        jcbType.addItem("Покупатели");
        jcbType.addItem("Поставщики");

        //Contractor hasn't been chosen
        contractorCode = - 1;

        //Intial date
        Calendar c1 = Calendar.getInstance();
        c1.add(Calendar.DATE, - 30);
        startDate = new JDateChooser(c1.getTime());
        GroupLayout gl = (GroupLayout) jpStartDate.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(startDate)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(startDate)));

        //Final date
        Calendar c2 = Calendar.getInstance();
        endDate = new JDateChooser(c2.getTime());
        gl = (GroupLayout) jpEndDate.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(endDate)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(endDate)));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbType = new javax.swing.JComboBox();
        jtfContractor = new javax.swing.JTextField();
        jbContractor = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();
        jbExe = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jpStartDate = new javax.swing.JPanel();
        jpEndDate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jlMsgs = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getResourceMap(Reconciliation.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jcbType.setName("jcbType"); // NOI18N
        jcbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTypeActionPerformed(evt);
            }
        });

        jtfContractor.setText(resourceMap.getString("jtfContractor.text")); // NOI18N
        jtfContractor.setName("jtfContractor"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getActionMap(Reconciliation.class, this);
        jbContractor.setAction(actionMap.get("chooseContractor")); // NOI18N
        jbContractor.setText(resourceMap.getString("jbContractor.text")); // NOI18N
        jbContractor.setName("jbContractor"); // NOI18N

        jbClose.setAction(actionMap.get("closeReport")); // NOI18N
        jbClose.setText(resourceMap.getString("jbClose.text")); // NOI18N
        jbClose.setName("jbClose"); // NOI18N

        jbExe.setAction(actionMap.get("createReconcillation")); // NOI18N
        jbExe.setText(resourceMap.getString("jbExe.text")); // NOI18N
        jbExe.setName("jbExe"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jpStartDate.setName("jpStartDate"); // NOI18N

        javax.swing.GroupLayout jpStartDateLayout = new javax.swing.GroupLayout(jpStartDate);
        jpStartDate.setLayout(jpStartDateLayout);
        jpStartDateLayout.setHorizontalGroup(
            jpStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jpStartDateLayout.setVerticalGroup(
            jpStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        jpEndDate.setName("jpEndDate"); // NOI18N

        javax.swing.GroupLayout jpEndDateLayout = new javax.swing.GroupLayout(jpEndDate);
        jpEndDate.setLayout(jpEndDateLayout);
        jpEndDateLayout.setHorizontalGroup(
            jpEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jpEndDateLayout.setVerticalGroup(
            jpEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jlMsgs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlMsgs.setText(resourceMap.getString("jlMsgs.text")); // NOI18N
        jlMsgs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlMsgs.setName("jlMsgs"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(260, 260, 260))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcbType, 0, 135, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfContractor, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbContractor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jlMsgs, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbExe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbClose)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfContractor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbContractor))
                    .addComponent(jcbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlMsgs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbExe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTypeActionPerformed
        selectType();
    }//GEN-LAST:event_jcbTypeActionPerformed

    //Call the frame to choosecontractor
    @Action
    public void chooseContractor() {

        if (jcbType.getSelectedIndex() == 0) {
            //If we need to choose a contractor
            JInternalFrame x = new ContractorsView(contractorCode, salesView, this);
            salesView.getJDesktopPane().add(x, javax.swing.JLayeredPane.DEFAULT_LAYER);
            x.setVisible(true);
            try {
                x.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {
                logger.error(e);
            }
        } else {
            //If we need to choose a supplier
            JInternalFrame x = new SuppliersView(salesView, this);
            salesView.getJDesktopPane().add(x, javax.swing.JLayeredPane.DEFAULT_LAYER);
            x.setVisible(true);
            try {
                x.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {
                logger.error(e);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbContractor;
    private javax.swing.JButton jbExe;
    private javax.swing.JComboBox jcbType;
    private javax.swing.JLabel jlMsgs;
    private javax.swing.JPanel jpEndDate;
    private javax.swing.JPanel jpStartDate;
    private javax.swing.JTextField jtfContractor;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;
    private Integer contractorCode;
    private JDateChooser startDate;
    private JDateChooser endDate;

    //Called from the frame choosing a contractor
    public void setContractor(Integer contractorCode) {
        this.contractorCode = contractorCode;
        Session session = HUtil.getSession();
        Contractors c = (Contractors) HUtil.getElement("Contractors", contractorCode, session);
        jtfContractor.setText(c.getName());
        session.close();
    }

    //Called from the frame choosing a supplier
    public void setSupplier(Integer supplierCode) {
        this.contractorCode = supplierCode;
        Session session = HUtil.getSession();
        Suppliers s = (Suppliers) HUtil.getElement("Suppliers", contractorCode, session);
        jtfContractor.setText(s.getName());
        session.close();
    }

    private class ReconciliationReportTask extends SwingWorker<Void, String> {

        private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        private final SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");

        @Override
        protected Void doInBackground() {

            try {

                //Template
                File file = new File(Util.getAppPath() + "\\templates\\ReconciliationReport.ods");
                final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);
                sheet.getCellAt("A2").setValue(
                        "            взаимных расчетов по состоянию c "
                        + sdfd.format(startDate.getDate()) + " по " + sdfd.format(endDate.getDate()));

                publish("Запрос в базу данных");

                Session session = HUtil.getSession();

                //Fill common values
                Contractors c = null;
                Suppliers s = null;
                if (jcbType.getSelectedIndex() == 0) {
                    c = (Contractors) HUtil.getElement("Contractors", contractorCode, session);
                    if(c == null) {
                        JOptionPane.showMessageDialog(null, "Укажите покупателя!", "Акт сверки", JOptionPane.ERROR_MESSAGE);
                        return null;
                    }
                } else {
                    s = (Suppliers) HUtil.getElement("Suppliers", contractorCode, session);
                    if(s == null) {
                        JOptionPane.showMessageDialog(null, "Укажите поставщика!", "Акт сверки", JOptionPane.ERROR_MESSAGE);
                        return null;
                    }
                }
                
                String name = HUtil.getConstant("name");
                if (jcbType.getSelectedIndex() == 0) {
                    sheet.getCellAt("A3").setValue(
                            "      между " + name + ",рез. РБ, " + c.getName() + ",рез. РБ");

                } else {
                    sheet.getCellAt("A3").setValue(
                            "      между " + name + ",рез. РБ, " + s.getName() + ",рез. РБ");
                }

                sheet.getCellAt("C5").setValue(name + ", " + HUtil.getConstant("address"));
                sheet.getCellAt("A11").setValue("По данным " + name + ", рез. РБ, руб. (1 Сторона)");

                if (jcbType.getSelectedIndex() == 0) {
                    sheet.getCellAt("C7").setValue(c.getName() + ", " + c.getAddress() + "      ");
                    sheet.getCellAt("E11").setValue("По данным " + c.getName() + ", рез. РБ, руб. (2 Сторона)" + "      ");
                } else {
                    sheet.getCellAt("C7").setValue(s.getName() + ", " + s.getAddress() + "      ");
                    sheet.getCellAt("E11").setValue("По данным " + s.getName() + ", рез. РБ, руб. (2 Сторона)" + "      ");
                }

                long amount1 = 0;
                long amountIn = 0;
                long amountOut = 0;

                int ts;

                //Fill the template
                if (jcbType.getSelectedIndex() == 1) {

                    //Case of a supplier
                    //Incoming amount
                    List res = session.createSQLQuery(
                            "SELECT SUM(it.ndsAndAmount) FROM Incoming i, Incomingtable AS it"
                            + " WHERE i.code = it.documentCode"
                            + " AND i.contractor = " + contractorCode
                            + " AND DATE(i.datetime) <'" + sdf.format(startDate.getDate()) + "'"
                            + " AND i.active = 1").list();
                    if (res != null && res.size() > 0) {
                        amount1 += Util.getLongObj(res.get(0));
                    }

                    //Payments from the contractor
                    res = session.createSQLQuery(
                            "SELECT SUM(po.amount) FROM Paymentorder AS po"
                            + " WHERE po.receiver = " + contractorCode
                            + " AND DATE(po.datetime) <'" + sdf.format(startDate.getDate()) + "'"
                            + " AND po.active != 2").list();

                    if (res != null && res.size() > 0) {
                        amount1 -= Util.getLongObj(res.get(0));
                    }

                    //Fill the amount
                    if (amount1 > 0) {
                        sheet.getCellAt("C13").setValue(amount1);
                    } else if (amount1 < 0) {
                        sheet.getCellAt("D13").setValue(-amount1);
                    }

                    //List of incoming docs
                    List ins = HUtil.executeHql(
                            "from Incoming i"
                            + " where i.contractor = " + contractorCode
                            + " and DATE(i.datetime) >='" + sdf.format(startDate.getDate()) + "'"
                            + " and DATE(i.datetime) <='" + sdf.format(endDate.getDate()) + "'"
                            + " and i.active = 1");

                    //List of payments
                    List outs = HUtil.executeHql(
                            "from Paymentorder po"
                            + " where po.receiver = " + contractorCode
                            + " and DATE(po.datetime) >='" + sdf.format(startDate.getDate()) + "'"
                            + " and DATE(po.datetime) <='" + sdf.format(endDate.getDate()) + "'"
                            + " and po.active != 2");

                    publish("Создание отчета");

                    //Prepare the necessary number of lines
                    ts = ins.size() + outs.size();
                    if (ts > 0) {
                        sheet.duplicateRows(13, 1, ts - 1);
                    }

                    int i = 0;
                    int j = 0;
                    int k = 0;

                    //Fill the template, order by date
                    Date dIn = new Date(0, 0, 0);
                    Date dOut = new Date(0, 0, 0);
                    Incoming in = new Incoming();
                    Paymentorder out = new Paymentorder();

                    while (i < ins.size() || j < outs.size()) {

                        sheet.getCellAt("A" + (14 + k)).setValue(k + 1);
                        if (i < ins.size()) {
                            in = (Incoming) ins.get(i);
                            dIn = in.getDatetime();
                        }
                        if (j < outs.size()) {
                            out = (Paymentorder) outs.get(j);
                            dOut = out.getDatetime();
                        }

                        //Add the appropriate doc
                        if (dIn.before(dOut) && i < ins.size() || j == outs.size()) {

                            //Add incoming doc
                            sheet.getCellAt("B" + (14 + k)).setValue(
                                    "Приход № " + in.getNumber() + " от " + sdfd.format(dIn) + "      ");

                            res = HUtil.executeHql(
                                    "select sum(it.ndsAndAmount) from Incomingtable it"
                                    + " where it.documentCode = " + in.getCode());
                            if (res != null && res.size() > 0) {
                                sheet.getCellAt("D" + (14 + k)).setValue(res.get(0));
                                amountIn += (Long) res.get(0);
                            }
                            i++;

                        } else if (dOut.before(dIn) && j < outs.size() || i == ins.size()) {

                            //Add payment
                            Paymentorder po = (Paymentorder) outs.get(j);
                            sheet.getCellAt("B" + (14 + k)).setValue(
                                    "Платежное поручение № " + po.getNumber() + " от " + sdfd.format(dOut) + "      ");
                            sheet.getCellAt("C" + (14 + k)).setValue(po.getAmount());
                            amountOut += po.getAmount();
                            j++;
                        }
                        k++;
                        publish("Создание отчета, выведено " + (new DecimalFormat("#")).format(((double) k) * 100 / ((double) (ins.size() + outs.size()))) + "%");
                    }

                    sheet.getCellAt("B" + (19 + ts)).setValue(name + ", " + HUtil.getConstant("address"));
                    sheet.getCellAt("B" + (20 + ts)).setValue(s.getName() + ", " + s.getAddress());

                } else {

                    //Case of a contractor
                    //List of outcoming docs
                    List res = session.createSQLQuery(
                            "SELECT SUM(ot.amount) FROM Outcoming AS o, Outcomingtable AS ot"
                            + " WHERE o.code = ot.documentCode"
                            + " AND o.contractor = " + contractorCode
                            + " AND DATE(o.datetime) <'" + sdf.format(startDate.getDate()) + "'"
                            + " AND o.active = 1").list();

                    if (res != null && res.size() > 0) {
                        amount1 += Util.getLongObj(res.get(0));
                    }

                    //List of payments
                    res = session.createSQLQuery(
                            "SELECT SUM(op.amount) from Outcomingpayments AS op, Outcoming AS o"
                            + " WHERE o.code = op.documentCode"
                            + " AND DATE(o.datetime) <'" + sdf.format(startDate.getDate()) + "'"
                            + " AND o.active = 1").list();
                    if (res != null && res.size() > 0) {
                        amount1 -= Util.getLongObj(res.get(0));
                    }

                    if (amount1 > 0) {
                        sheet.getCellAt("C13").setValue(amount1);
                    } else if (amount1 < 0) {
                        sheet.getCellAt("D13").setValue(-amount1);
                    }

                    //List of outcoming docs
                    List outs = HUtil.executeHql(
                            "from Outcoming o"
                            + " where o.contractor = " + contractorCode
                            + " and DATE(o.datetime) >='" + sdf.format(startDate.getDate()) + "'"
                            + " and DATE(o.datetime) <='" + sdf.format(endDate.getDate()) + "'"
                            + " and o.active = 1");

                    //List of payments
                    List outps = HUtil.executeHql(
                            "SELECT op.id FROM Outcoming AS o, Outcomingpayments AS op"
                            + " WHERE o.code = op.documentCode"
                            + " AND o.contractor = " + contractorCode
                            + " AND DATE(o.datetime) >='" + sdf.format(startDate.getDate()) + "'"
                            + " AND DATE(o.datetime) <='" + sdf.format(endDate.getDate()) + "'"
                            + " AND o.active = 1");

                    publish("Создание отчета");

                    //Prepare the template by creating necessary number of lines
                    ts = outs.size() + outps.size();
                    if (ts > 0) {
                        sheet.duplicateRows(13, 1, ts - 1);
                    }

                    //Fill outcoming docs
                    for (int j = 0; j < outs.size(); j++) {
                        Outcoming out = (Outcoming) outs.get(j);
                        sheet.getCellAt("A" + (14 + j)).setValue(j + 1);

                        res = session.createSQLQuery(
                                "SELECT SUM(ot.amount) FROM Outcomingtable AS ot"
                                + " WHERE ot.documentCode = " + out.getCode()).list();
                        if (res != null && res.size() > 0) {
                            Long aOut = Util.getLongObj(res.get(0));
                            if (aOut > 0) {
                                sheet.getCellAt("B" + (14 + j)).setValue(
                                        "ТН № " + out.getTnnumber() + " от " + sdfd.format(out.getDatetime()) + "      ");
                                sheet.getCellAt("D" + (14 + j)).setValue(aOut);
                                amountOut += aOut;
                            }
                            //Fill payments
                            List rops = HUtil.executeHql(
                                    "from Outcomingpayments op where op.documentCode = " + out.getCode());
                            if (rops != null) {
                                for (int k = 0; k < rops.size(); k++) {
                                    Outcomingpayments op = (Outcomingpayments) rops.get(k);
                                    sheet.getCellAt("B" + (15 + j + k)).setValue(
                                            "Выписка банка № " + op.getNumber()
                                            + " от " + sdfd.format(op.getDatetime()) + "      ");
                                    sheet.getCellAt("C" + (15 + j + k)).setValue(op.getAmount());
                                    amountIn += op.getAmount();
                                }
                            }
                        }
                    }
                    sheet.getCellAt("B" + (18 + ts)).setValue(name + ", " + HUtil.getConstant("address"));
                    sheet.getCellAt("B" + (19 + ts)).setValue(c.getName() + ", " + c.getAddress());
                }

                sheet.getCellAt("D" + (14 + ts)).setValue(amountIn);
                sheet.getCellAt("C" + (14 + ts)).setValue(amountOut);

                long amount2 = amount1 + amountIn - amountOut;

                if (amount2 > 0) {
                    sheet.getCellAt("C" + (15 + ts)).setValue(amount2);
                } else if (amount2 < 0) {
                    sheet.getCellAt("D" + (15 + ts)).setValue(-amount2);
                }

                session.close();

                //Save the file, make sure the name is uniques, open it
                String fn = "temp\\Акт сверки " + Math.round(Math.random() * 100000) + ".ods";
                File outputFile = new File(fn);

                sheet.getSpreadSheet().saveAs(outputFile);
                Util.openDoc(fn);

            } catch (Exception e) {
                logger.error(e);
            }
            
            return null;
        }

        @Override
        protected void process(List<String> msgs) {
            for (int i = 0; i < msgs.size(); i++) {
                jlMsgs.setText(msgs.get(i));
            }
        }

        @Override
        protected void done() {
            reconciliationReportRun = false;
            jlMsgs.setText("Выполнен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }

        protected void cancel() {
            reconciliationReportRun = false;
            jlMsgs.setText("Остановлен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }
    }

    //Create reconcillation report
    @Action
    public void createReconcillation() {
        
        if (reconciliationReportRun) {
            int a = JOptionPane.showOptionDialog(
                    this, "Остановить создание отчета?",
                    "Акт сверки", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
            if (a == 0) {
                if (reconciliationReportTask.cancel(true)) {
                    reconciliationReportRun = false;
                    jlMsgs.setText("");
                    jbExe.setText("Сформировать");
                    jbClose.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(
                            this, "Невозможно прервать создание отчета!", "Акт сверки", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            reconciliationReportTask = new ReconciliationReportTask();
            reconciliationReportTask.execute();
            reconciliationReportRun = true;
            jbExe.setText("Отмена");
            jbClose.setEnabled(false);
        }

    }

    public void close() {
        Util.closeJIF(this, salesView, salesView);
        Util.closeJIFTab(this, salesView);
    }

    @Action
    public void closeReport() {
        close();
    }

    private void selectType() {
        contractorCode = - 1;
        jtfContractor.setText("");
    }
}
