/*
 * SaledGoodsReport.java
 *
 * Created on 19.10.2011, 13:30:09
 */
package sales.reports;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingWorker;
import org.apache.log4j.Logger;
import org.hibernate.classic.Session;
import org.jdesktop.application.Action;
import org.jopendocument.dom.spreadsheet.Sheet;
import org.jopendocument.dom.spreadsheet.SpreadSheet;
import sales.SalesApp;
import sales.SalesView;
import sales.entity.Contractors;
import sales.entity.Incoming;
import sales.entity.Outcoming;
import sales.entity.Outcomingpayments;
import sales.entity.Previousbalance;
import sales.entity.Register;
import sales.entity.Suppliers;
import sales.interfaces.IClose;
import sales.util.HUtil;
import sales.util.Util;

public class SaledGoodsReport extends javax.swing.JInternalFrame implements IClose {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());
    private SaledGoodsReportTask saledGoodsReportTask;
    boolean saledGoodsReportRun;
    private Part1ReportTask part1ReportTask;
    boolean part1ReportRun;

    /** Creates new form SaledGoodsReport */
    public SaledGoodsReport(SalesView salesView) {

        initComponents();

        this.salesView = salesView;

        Util.initJIF(this, "Учет реализованных товаров по покупной стоимости", salesView, salesView);

        //Quarters
        jcbQuarter.addItem("Первый");
        jcbQuarter.addItem("Второй");
        jcbQuarter.addItem("Третий");
        jcbQuarter.addItem("Четвертый/Год");

        Calendar c = Calendar.getInstance();
        jcbQuarter.setSelectedIndex(c.get(Calendar.MONTH) / 4);

        //Year
        jsYear.setModel(new SpinnerDateModel());
        JSpinner.DateEditor yearEditor = new JSpinner.DateEditor(jsYear, "yyyy");
        jsYear.setEditor(yearEditor);
        jsYear.setValue(c.getTime());

        jcbQuarter.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    quarterChange();
                }
            }
        });

        quarterChange();

        jtfInitialBalance.addKeyListener(new KeyAdapter() {

            @Override
            public void keyTyped(KeyEvent e) {
                jtfInitialBalance.setEditable(
                        (Character.isDigit((e.getKeyChar())) || e.getKeyChar() == KeyEvent.VK_BACK_SPACE));
            }
        });
        
        saledGoodsReportRun = false;
        part1ReportRun = false;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcbQuarter = new javax.swing.JComboBox();
        jbClose = new javax.swing.JButton();
        jbExe = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jsYear = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jtfInitialBalance = new javax.swing.JTextField();
        jbSave = new javax.swing.JButton();
        jbExe1 = new javax.swing.JButton();
        jlMsgs = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getResourceMap(SaledGoodsReport.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jcbQuarter.setName("jcbQuarter"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getActionMap(SaledGoodsReport.class, this);
        jbClose.setAction(actionMap.get("close")); // NOI18N
        jbClose.setText(resourceMap.getString("jbClose.text")); // NOI18N
        jbClose.setName("jbClose"); // NOI18N

        jbExe.setAction(actionMap.get("createSaledGoodsReport")); // NOI18N
        jbExe.setText(resourceMap.getString("jbExe.text")); // NOI18N
        jbExe.setName("jbExe"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jsYear.setName("jsYear"); // NOI18N
        jsYear.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsYearStateChanged(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jtfInitialBalance.setText(resourceMap.getString("jtfInitialBalance.text")); // NOI18N
        jtfInitialBalance.setName("jtfInitialBalance"); // NOI18N

        jbSave.setAction(actionMap.get("save")); // NOI18N
        jbSave.setText(resourceMap.getString("jbSave.text")); // NOI18N
        jbSave.setName("jbSave"); // NOI18N

        jbExe1.setAction(actionMap.get("createPart1")); // NOI18N
        jbExe1.setText(resourceMap.getString("jbExe1.text")); // NOI18N
        jbExe1.setName("jbExe1"); // NOI18N

        jlMsgs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlMsgs.setText(resourceMap.getString("jlMsgs.text")); // NOI18N
        jlMsgs.setName("jlMsgs"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbQuarter, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlMsgs, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                                .addComponent(jbExe1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbExe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbClose))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jsYear, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfInitialBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbQuarter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jsYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfInitialBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbClose)
                    .addComponent(jbExe)
                    .addComponent(jbExe1)
                    .addComponent(jlMsgs, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jsYearStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsYearStateChanged
        quarterChange();
    }//GEN-LAST:event_jsYearStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbExe;
    private javax.swing.JButton jbExe1;
    private javax.swing.JButton jbSave;
    private javax.swing.JComboBox jcbQuarter;
    private javax.swing.JLabel jlMsgs;
    private javax.swing.JSpinner jsYear;
    private javax.swing.JTextField jtfInitialBalance;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;

    private class SaledGoodsReportTask extends SwingWorker<Void, String> {

        private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        private final SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");
        private final SimpleDateFormat sdfy = new SimpleDateFormat("yyyy");

        @Override
        protected Void doInBackground() {

            try {

                int q = jcbQuarter.getSelectedIndex();
                Date startDate = getStartDate(q);
                Date endDate = getEndDate(q);

                //Template
                File file = new File(Util.getAppPath() + "\\templates\\SaledGoodsReport.ods");
                final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);

                //Fill date
                String qs = "";
                if (q == 0) {
                    qs = "I";
                } else if (q == 1) {
                    qs = "II";
                } else if (q == 2) {
                    qs = "III";
                } else if (q == 3) {
                    qs = "IV";
                }
                sheet.getCellAt("A3").setValue(qs + " квартал " + sdfy.format(jsYear.getValue()) + " года");

                publish("Запрос в базу данных");

                //Get docs for the given quarter
                Session session = HUtil.getSession();

                //Incoming docs
                List ins = HUtil.executeHql(
                        "from Incoming i"
                        + " where DATE(i.datetime) >= '" + sdf.format(startDate) + "'"
                        + " and DATE(i.datetime) <= '" + sdf.format(endDate) + "'"
                        + " and i.type = 0"
                        + " and i.active = 1", session);

                //Register incoming docs
                List rins = HUtil.executeHql(
                        "from Register r"
                        + " where DATE(r.datetime) >= '" + sdf.format(startDate) + "'"
                        + " and DATE(r.datetime) <= '" + sdf.format(endDate) + "'"
                        + " and r.documentType = 0"
                        + " and r.active = 1", session);

                //Outcoming docs
                List outs = HUtil.executeHql(
                        "from Outcoming o"
                        + " where DATE(o.datetime) >= '" + sdf.format(startDate) + "'"
                        + " and DATE(o.datetime) <= '" + sdf.format(endDate) + "'"
                        + " and o.documentType = 0"
                        + " and o.active = 1", session);

                publish("Создание отчета");

                //Prepare templates with necessary number of lines
                int ts = ins.size() + rins.size() + outs.size();
                if (ts > 0) {
                    sheet.duplicateRows(6, 1, ts - 1);
                }

                //Fill incoming docs
                long inAmount = 0;
                int i;
                for (i = 0; i < ins.size(); i++) {
                    sheet.getCellAt("A" + (7 + i)).setValue(i + 1);
                    Incoming in = (Incoming) ins.get(i);
                    Suppliers s = (Suppliers) HUtil.getElement("Suppliers", in.getContractor(), session);
                    if (s != null) {
                        sheet.getCellAt("B" + (7 + i)).setValue(
                                "Получен товар, ТН № " + in.getNumber()
                                + " от " + sdfd.format(in.getDatetime())
                                + ", " + s.getName());
                    } else {
                        sheet.getCellAt("B" + (7 + i)).setValue(
                                "Получен товар, ТН № " + in.getNumber());
                    }
                    long docAmount = HUtil.getDocFieldSum(in.getCode(), "Incoming", "ndsAndAmount");
                    sheet.getCellAt("D" + (7 + i)).setValue(docAmount);
                    inAmount += docAmount;
                    publish("Создание отчета, выведено " + (new DecimalFormat("#")).format(((double) i) * 100 / ((double) ts)) + "%");
                }

                //Fill register docs
                long outAmount = 0;
                int j;
                for (j = 0; j < rins.size(); j++) {
                    sheet.getCellAt("A" + (7 + i + j)).setValue(i + j + 1);
                    Register r = (Register) rins.get(j);
                    sheet.getCellAt("B" + (7 + i + j)).setValue(
                            "Реализован товар, ПКО № " + r.getNumber()
                            + " от " + sdfd.format(r.getDatetime()) + ", Касса");
                    sheet.getCellAt("F" + (7 + i + j)).setValue(r.getAmount());
                    outAmount += r.getAmount();
                    publish("Создание отчета, выведено " + (new DecimalFormat("#")).format(((double) (i + j)) * 100 / ((double) ts)) + "%");
                }

                //Fill outcoming docs
                int l = i + j;
                int k;
                for (k = 0; k < outs.size(); k++) {

                    sheet.getCellAt("A" + (7 + l + k)).setValue(l + k + 1);
                    Outcoming out = (Outcoming) outs.get(k);
                    //Outcoming docs filled, line per payment
                    List ops = HUtil.executeHql(
                            "from Outcomingpayments op"
                            + " where op.documentCode = " + out.getCode());
                    Contractors c = (Contractors) HUtil.getElement("Contractors", out.getContractor(), session);
                    if (c != null) {
                        String str =
                                "Реализован товар, ТН № " + out.getTnnumber()
                                + " от " + sdfd.format(out.getDatetime())
                                + ", ";
                        for (int m = 0; m < ops.size(); m++) {
                            Outcomingpayments op = (Outcomingpayments) ops.get(m);
                            str +=
                                    "П/П № " + op.getNumber() + " от " + sdfd.format(op.getDatetime()) + ", ";
                        }
                        str += c.getName();
                        sheet.getCellAt("B" + (7 + l + k)).setValue(str);
                    } else {
                        String str =
                                "Реализован товар, ТН № " + out.getTnnumber();
                        for (int m = 0; m < ops.size(); m++) {
                            Outcomingpayments op = (Outcomingpayments) ops.get(m);
                            str +=
                                    ", П/П № " + op.getNumber() + " от " + sdfd.format(op.getDatetime());
                        }
                        sheet.getCellAt("B" + (7 + l + k)).setValue(str);
                    }
                    long docAmount = HUtil.getDocFieldSum(out.getCode(), "Outcoming", "amount");
                    sheet.getCellAt("F" + (7 + l + k)).setValue(docAmount);
                    outAmount += docAmount;
                    publish("Создание отчета, выведено " + (new DecimalFormat("#")).format(((double) (l + k)) * 100 / ((double) ts)) + "%");
                }

                //Fill balances
                long inBalance = 0;
                if (!jtfInitialBalance.getText().isEmpty()) {
                    inBalance = Integer.parseInt(jtfInitialBalance.getText());
                }
                long outBalance = HUtil.getWholeBalance(endDate, true);
                double coeff = ((double) ((inBalance + inAmount))) / ((double) (outBalance + outAmount)) * 100;
                double buyingAmount = ((double) outBalance) * coeff / 100;

                sheet.getCellAt("C" + (7 + l + k)).setValue(inBalance);
                sheet.getCellAt("D" + (7 + l + k)).setValue(inAmount);
                sheet.getCellAt("E" + (7 + l + k)).setValue(inBalance + inAmount);
                sheet.getCellAt("F" + (7 + l + k)).setValue(outAmount);
                sheet.getCellAt("G" + (7 + l + k)).setValue(outBalance);
                sheet.getCellAt("H" + (7 + l + k)).setValue(outBalance + outAmount);
                sheet.getCellAt("I" + (7 + l + k)).setValue(coeff);
                sheet.getCellAt("J" + (7 + l + k)).setValue(buyingAmount);
                sheet.getCellAt("K" + (7 + l + k)).setValue(inBalance + inAmount - buyingAmount);

                //Save to OpenOffice, make sure the file name is unique, open the file
                String fn = "temp\\Учет реализованных товаров " + Math.round(Math.random() * 100000) + ".ods";
                File outputFile = new File(fn);
                sheet.getSpreadSheet().saveAs(outputFile);
                Util.openDoc(fn);

                //Save computed balance value if needed
                int a = JOptionPane.showOptionDialog(
                        null, "Сохранить покупную стоимость на следующий период?",
                        "Сохранение покупной стоимости", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
                if (a == 0) {
                    Calendar cal = Calendar.getInstance();
                    cal.setTime((Date) jsYear.getValue());
                    int nq = q + 1;
                    if (nq > 3) {
                        nq = 0;
                        cal.add(Calendar.YEAR, 1);
                    }
                    session.beginTransaction();
                    Previousbalance pb = new Previousbalance();
                    List res = HUtil.executeHql(
                            "from Previousbalance pb"
                            + " where year = " + sdfy.format(cal.getTime())
                            + " and quarter = " + nq, session);
                    if (res.size() > 0) {
                        pb = (Previousbalance) res.get(0);
                    } else {
                        pb.setYear(cal.get(Calendar.YEAR));
                        pb.setQuarter(nq);
                    }
                    pb.setAmount((int) Math.round(buyingAmount));

                    session.saveOrUpdate(pb);

                    session.getTransaction().commit();

                    session.close();

                }

            } catch (Exception e) {
                logger.error(e);
            }

            return null;
        }

        @Override
        protected void process(List<String> msgs) {
            for (int i = 0; i < msgs.size(); i++) {
                jlMsgs.setText(msgs.get(i));
            }
        }

        @Override
        protected void done() {
            saledGoodsReportRun = false;
            jlMsgs.setText("Выполнен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }

        protected void cancel() {
            saledGoodsReportRun = false;
            jlMsgs.setText("Остановлен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }
    }

    //Create Part VI of Tax Declaration for the given quarter
    @Action
    public void createSaledGoodsReport() {

        if (saledGoodsReportRun) {
            int a = JOptionPane.showOptionDialog(
                    this, "Остановить создание отчета?",
                    "Раздел VI", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
            if (a == 0) {
                if (saledGoodsReportTask.cancel(true)) {
                    saledGoodsReportRun = false;
                    jlMsgs.setText("");
                    jbExe.setText("Сформировать");
                    jbClose.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(
                            this, "Невозможно прервать создание отчета!", "Раздел VI", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            saledGoodsReportTask = new SaledGoodsReportTask();
            saledGoodsReportTask.execute();
            saledGoodsReportRun = true;
            jbExe.setText("Отмена");
            jbClose.setEnabled(false);
        }

    }

    //Start date for the given quarter
    private Date getStartDate(int q) {
        Calendar cal = Calendar.getInstance();
        Calendar calYear = Calendar.getInstance();
        calYear.setTime((Date) jsYear.getValue());
        cal.set(Calendar.YEAR, calYear.get(Calendar.YEAR));
        cal.set(Calendar.DAY_OF_MONTH, 1);
        if (q == 0) {
            cal.set(Calendar.MONTH, 0);
        } else if (q == 1) {
            cal.set(Calendar.MONTH, 3);
        } else if (q == 2) {
            cal.set(Calendar.MONTH, 6);
        } else if (q == 3) {
            cal.set(Calendar.MONTH, 9);
        }
        return cal.getTime();
    }

    //End date for the given quarter
    private Date getEndDate(int q) {
        Calendar cal = Calendar.getInstance();
        cal.setTime((Date) jsYear.getValue());
        if (q == 0) {
            cal.set(Calendar.MONTH, 2);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        } else if (q == 1) {
            cal.set(Calendar.MONTH, 5);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        } else if (q == 2) {
            cal.set(Calendar.MONTH, 8);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        } else if (q == 3) {
            cal.set(Calendar.MONTH, 11);
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        }
        return cal.getTime();
    }

    private class Part1ReportTask extends SwingWorker<Void, String> {

        private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        private final SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");
        private final SimpleDateFormat sdy = new SimpleDateFormat("yyyy");

        @Override
        protected Void doInBackground() {

            try {

                Session session = HUtil.getSession();

                int q = jcbQuarter.getSelectedIndex();

                //Template
                File file = new File(Util.getAppPath() + "\\templates\\IncomeRecords.ods");
                final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);

                //Create necessary number of line
                if (q > 0) {
                    sheet.duplicateRows(6, 2, q);
                }

                publish("Запрос в базу данных");

                //Get necessary balances
                List qrs = HUtil.executeHql(
                        "from Previousbalance pb"
                        + " where pb.year = " + sdy.format((Date) jsYear.getValue())
                        + " and pb.quarter <= " + q
                        + " order by pb.quarter", session);

                long yearAmount = 0;
                long buyingAmount = 0;

                publish("Создание отчета");

                //Fill template for quarters
                int n = 7;
                for (int i = 0; i <= q; i++) {

                    //Get payments for the outcoming docs
                    List ops = HUtil.executeHql(
                            "select op"
                            + " from Outcoming o, Outcomingpayments op"
                            + " where op.documentCode = o.code"
                            + " and DATE(op.datetime) >= '" + sdf.format(getStartDate(i)) + "'"
                            + " and DATE(op.datetime) <= '" + sdf.format(getEndDate(i)) + "'"
                            + " and o.active = 1", session);

                    //Get outcoming register docs
                    List rgs = HUtil.executeHql(
                            "from Register r"
                            + " where DATE(r.datetime) >= '" + sdf.format(getStartDate(i)) + "'"
                            + " and DATE(r.datetime) <= '" + sdf.format(getEndDate(i)) + "'"
                            + " and r.documentType = 0"
                            + " and r.active = 1", session);

                    //Prepare the necessary number of lines
                    int ts = ops.size() + rgs.size();
                    if (ts > 0) {
                        sheet.duplicateRows(n - 1, 1, ts - 1);
                    }

                    long amount = 0;

                    //Fill payments
                    int j;
                    for (j = 0; j < ops.size(); j++) {

                        Outcomingpayments op = (Outcomingpayments) ops.get(j);

                        Outcoming o = (Outcoming) HUtil.getElement("Outcoming", op.getDocumentCode());
                        Contractors c = (Contractors) HUtil.getElement("Contractors", o.getContractor());

                        sheet.getCellAt("A" + n).setValue(j + 1);
                        sheet.getCellAt("B" + n).setValue(
                                "ПП № " + op.getNumber() + " от " + sdfd.format(op.getDatetime()));
                        if (c == null) {
                            sheet.getCellAt("C" + n).setValue(
                                    "Торг.выручка по ТН(ТТН) №" + o.getTnnumber() + " от " + sdfd.format(o.getDatetime()));
                        } else {
                            sheet.getCellAt("C" + n).setValue(
                                    "Торг.выручка по ТН(ТТН) №" + o.getTnnumber() + " от " + sdfd.format(o.getDatetime())
                                    + ", " + c.getName());
                        }
                        sheet.getCellAt("D" + n).setValue(op.getAmount());
                        sheet.getCellAt("E" + n).setValue(0);
                        sheet.getCellAt("F" + n).setValue(0);
                        sheet.getCellAt("G" + n).setValue(op.getAmount());
                        sheet.getCellAt("H" + n).setValue("x");
                        sheet.getCellAt("I" + n).setValue("x");

                        amount += op.getAmount();
                        n++;
                        publish("Создание отчета, выведено " + (new DecimalFormat("#")).format(((double) j * (i + 1)) * 100 / ((double) ts) / ((double) ( q + 1))) + "%");
                    }

                    //Fill register docs
                    int k;
                    for (k = 0; k < rgs.size(); k++) {

                        Register r = (Register) rgs.get(k);

                        sheet.getCellAt("A" + n).setValue(k + 1);
                        sheet.getCellAt("B" + n).setValue(
                                "ПКО № " + r.getNumber() + " от " + sdfd.format(r.getDatetime()));
                        sheet.getCellAt("C" + n).setValue("Торг.выручка");
                        sheet.getCellAt("D" + n).setValue(r.getAmount());
                        sheet.getCellAt("E" + n).setValue(0);
                        sheet.getCellAt("F" + n).setValue(0);
                        sheet.getCellAt("G" + n).setValue(r.getAmount());
                        sheet.getCellAt("H" + n).setValue("x");
                        sheet.getCellAt("I" + n).setValue("x");

                        amount += r.getAmount();
                        n++;
                        publish("Создание отчета, выведено " + (new DecimalFormat("#")).format(((double) (j + k) * (i + 1)) * 100 / ((double) ts) / ((double) ( q + 1))) + "%");
                    }

                    //Text value for the quarter
                    String qs = "I";
                    if (i == 1) {
                        qs = "II";
                    } else if (i == 2) {
                        qs = "III";
                    } else if (i == 3) {
                        qs = "IV";
                    }

                    int m = n;
                    if (ts == 0) {
                        m++;
                    }

                    //Common values for the quarter
                    sheet.getCellAt("C" + m).setValue(qs + " квартал");
                    sheet.getCellAt("D" + m).setValue(amount);
                    sheet.getCellAt("E" + m).setValue(0);
                    sheet.getCellAt("F" + m).setValue(0);
                    sheet.getCellAt("G" + m).setValue(amount);

                    //Fill balance
                    for (int l = 0; l < qrs.size(); l++) {
                        Previousbalance pb = (Previousbalance) qrs.get(l);
                        if (pb.getQuarter() == i) {
                            if (pb.getAmount() != null) {
                                sheet.getCellAt("H" + m).setValue(pb.getAmount());
                                buyingAmount += pb.getAmount();
                                sheet.getCellAt("I" + m).setValue(amount - pb.getAmount());
                            } else {
                                sheet.getCellAt("H" + m).setValue(0);
                                sheet.getCellAt("I" + m).setValue(0);
                            }
                            break;
                        }
                        sheet.getCellAt("H" + m).setValue(0);
                        sheet.getCellAt("I" + m).setValue(0);
                    }

                    n = m + 1;

                    yearAmount += amount;
                }

                session.close();

                //Common values
                sheet.getCellAt("D" + n).setValue(yearAmount);
                sheet.getCellAt("E" + n).setValue(0);
                sheet.getCellAt("F" + n).setValue(0);
                sheet.getCellAt("G" + n).setValue(yearAmount);
                sheet.getCellAt("H" + n).setValue(buyingAmount);
                sheet.getCellAt("I" + n).setValue(yearAmount - buyingAmount);

                //Save the filled template, make sure the name is unique, open it
                String fn = "temp\\Учет доходов " + Math.round(Math.random() * 100000) + ".ods";
                File outputFile = new File(fn);
                sheet.getSpreadSheet().saveAs(outputFile);
                Util.openDoc(fn);

            } catch (Exception e) {
                logger.error(e);
            }

            return null;
        }
        @Override
        protected void process(List<String> msgs) {
            for (int i = 0; i < msgs.size(); i++) {
                jlMsgs.setText(msgs.get(i));
            }
        }

        @Override
        protected void done() {
            part1ReportRun = false;
            jlMsgs.setText("Выполнен");
            jbExe1.setText("Сформировать");
            jbClose.setEnabled(true);
        }

        protected void cancel() {
            part1ReportRun = false;
            jlMsgs.setText("Остановлен");
            jbExe1.setText("Сформировать");
            jbClose.setEnabled(true);
        }
    }

    //Create Part I of Tax Declaration
    @Action
    public void createPart1() {

        if (part1ReportRun) {
            int a = JOptionPane.showOptionDialog(
                    this, "Остановить создание отчета?",
                    "Раздел I", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
            if (a == 0) {
                if (part1ReportTask.cancel(true)) {
                    part1ReportRun = false;
                    jlMsgs.setText("");
                    jbExe1.setText("Сформировать");
                    jbClose.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(
                            this, "Невозможно прервать создание отчета!", "Раздел I", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            part1ReportTask = new Part1ReportTask();
            part1ReportTask.execute();
            part1ReportRun = true;
            jbExe1.setText("Отмена");
            jbClose.setEnabled(false);
        }

    }

    @Action
    public void close() {
        Util.closeJIF(this, salesView, salesView);
        Util.closeJIFTab(this, salesView);
    }

    //Fix form values when the quarter has changed
    private void quarterChange() {

        if (jsYear.getValue() instanceof Date) {

            Calendar c = Calendar.getInstance();
            c.setTime((Date) jsYear.getValue());
            //Fix balance
            List res = HUtil.executeHql(
                    "from Previousbalance x"
                    + " where x.year = " + c.get(Calendar.YEAR)
                    + " and x.quarter = " + jcbQuarter.getSelectedIndex());
            if (res.size() > 0) {
                Previousbalance x = (Previousbalance) res.get(0);
                if (x.getAmount() != null) {
                    jtfInitialBalance.setText(x.getAmount().toString());
                } else {
                    jtfInitialBalance.setText("");
                }
            } else {
                jtfInitialBalance.setText("");
            }

        }
        jtfInitialBalance.setEditable(true);
    }

    //Save balance
    @Action
    public void save() {

        Calendar c = Calendar.getInstance();
        c.setTime((Date) jsYear.getValue());

        //Find the appropriate previoius balance
        Session session = HUtil.getSession();
        List res = HUtil.executeHql(
                "from Previousbalance x"
                + " where x.year = " + c.get(Calendar.YEAR)
                + " and x.quarter = " + jcbQuarter.getSelectedIndex(), session);

        session.beginTransaction();
        if (res != null && res.size() > 0) {
            //If the balance exitsts, update it
            Previousbalance x = (Previousbalance) res.get(0);
            if (!jtfInitialBalance.getText().isEmpty()) {
                //Sanity check
                if (jtfInitialBalance.getText().length() < 11) {
                    x.setAmount(Integer.parseInt(jtfInitialBalance.getText()));
                } else {
                    JOptionPane.showMessageDialog(this, "Число слишком велико!", "Ошибка", JOptionPane.ERROR_MESSAGE);
                    session.close();
                    return;
                }
            } else {
                x.setAmount(null);
            }
            session.update(x);
        } else {
            //If the balance doesn't exist
            Previousbalance x = new Previousbalance();
            x.setYear(c.get(Calendar.YEAR));
            x.setQuarter(jcbQuarter.getSelectedIndex());
            x.setAmount(Integer.parseInt(jtfInitialBalance.getText()));
            session.save(x);
        }
        session.getTransaction().commit();
        session.close();
        JOptionPane.showMessageDialog(this, "Покупная стоимость сохранена!", "Сохранение", JOptionPane.PLAIN_MESSAGE);
    }
}
