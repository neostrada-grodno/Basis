package sales.reports;

import com.toedter.calendar.JDateChooser;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.log4j.Logger;
import org.hibernate.classic.Session;
import org.jdesktop.application.Action;
import org.jopendocument.dom.spreadsheet.Sheet;
import org.jopendocument.dom.spreadsheet.SpreadSheet;
import sales.SalesApp;
import sales.SalesView;
import sales.catalogs.EmployeeView;
import sales.entity.Employee;
import sales.interfaces.IClose;
import sales.interfaces.IEmployee;
import sales.util.Conn;
import sales.util.HUtil;
import sales.util.Util;

public class ProfitReport extends javax.swing.JInternalFrame implements IClose, IEmployee {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());
    private static final Connection conn = Conn.getConn();
    private ProfitReportTask profitReportTask;
    boolean profitReportRun;

    /** Creates new form NewJInternalFrame */
    public ProfitReport(SalesView salesView) {

        initComponents();

        this.salesView = salesView;

        Util.initJIF(this, "Прибыль", null, salesView);
        setName("Прибыль");

        //End date
        Calendar c = Calendar.getInstance();

        endDate = new JDateChooser(c.getTime());

        endDate.getDateEditor().addPropertyChangeListener(
                new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        if ("date".equals(e.getPropertyName())) {
                            checkStartDate();
                        }
                    }
                });

        GroupLayout gl = (GroupLayout) jpEndDate.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(endDate)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(endDate)));

        //Start date
        c.set(Calendar.DATE, 1);
        startDate = new JDateChooser(c.getTime());

        startDate.getDateEditor().addPropertyChangeListener(
                new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        if ("date".equals(e.getPropertyName())) {
                            checkEndDate();
                        }
                    }
                });

        gl = (GroupLayout) jpStartDate.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(startDate)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(startDate)));

        employeeCode = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jpStartDate = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jpEndDate = new javax.swing.JPanel();
        jbExe = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();
        jlMsgs = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtfEmployee = new javax.swing.JTextField();
        jbEmployee = new javax.swing.JButton();
        jbClearEmployee = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Прибыль");

        jLabel1.setText("С");
        jLabel1.setName("jLabel1"); // NOI18N

        jpStartDate.setName("jpStartDate"); // NOI18N

        javax.swing.GroupLayout jpStartDateLayout = new javax.swing.GroupLayout(jpStartDate);
        jpStartDate.setLayout(jpStartDateLayout);
        jpStartDateLayout.setHorizontalGroup(
            jpStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jpStartDateLayout.setVerticalGroup(
            jpStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );

        jLabel2.setText("по");
        jLabel2.setName("jLabel2"); // NOI18N

        jpEndDate.setName("jpEndDate"); // NOI18N

        javax.swing.GroupLayout jpEndDateLayout = new javax.swing.GroupLayout(jpEndDate);
        jpEndDate.setLayout(jpEndDateLayout);
        jpEndDateLayout.setHorizontalGroup(
            jpEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jpEndDateLayout.setVerticalGroup(
            jpEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(ProfitReport.class, this);
        jbExe.setAction(actionMap.get("profit")); // NOI18N
        jbExe.setText("Сформировать");
        jbExe.setName("jbExe"); // NOI18N

        jbClose.setAction(actionMap.get("closeReport")); // NOI18N
        jbClose.setText("Закрыть");
        jbClose.setName("jbClose"); // NOI18N

        jlMsgs.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlMsgs.setName("jlMsgs"); // NOI18N

        jLabel3.setText("Продавец");
        jLabel3.setName("jLabel3"); // NOI18N

        jtfEmployee.setName("jtfEmployee"); // NOI18N

        jbEmployee.setAction(actionMap.get("chooseEmployee")); // NOI18N
        jbEmployee.setText("...");
        jbEmployee.setName("jbEmployee"); // NOI18N

        jbClearEmployee.setAction(actionMap.get("clearEmployee")); // NOI18N
        jbClearEmployee.setText("X");
        jbClearEmployee.setName("jbClearEmployee"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlMsgs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClearEmployee))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jbExe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbClose, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jpEndDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpStartDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbClearEmployee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlMsgs, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbExe, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbClose, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jbClearEmployee;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbEmployee;
    private javax.swing.JButton jbExe;
    private javax.swing.JLabel jlMsgs;
    private javax.swing.JPanel jpEndDate;
    private javax.swing.JPanel jpStartDate;
    private javax.swing.JTextField jtfEmployee;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;
    private JDateChooser startDate;
    private JDateChooser endDate;
    private Integer employeeCode;

    //Sanity check when the initial date has been chosen
    private void checkStartDate() {

        if (startDate.getDate().after(endDate.getDate())) {
            Calendar c = Calendar.getInstance();
            c.setTime(startDate.getDate());
            c.add(Calendar.YEAR, -1);
            startDate.setDate(c.getTime());
        }
    }

    //Sanity check when the final date has been chosen
    private void checkEndDate() {

        if (startDate.getDate().after(endDate.getDate())) {
            Calendar c = Calendar.getInstance();
            c.setTime(endDate.getDate());
            c.add(Calendar.YEAR, 1);
            endDate.setDate(c.getTime());
        }
    }

    @Action
    public void closeReport() {
        close();
    }

    public void close() {
        Util.closeJIF(this, salesView, salesView);
        Util.closeJIFTab(this, salesView);
    }

    private class ProfitReportTask extends SwingWorker<Void, String> {

        private final SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yy");

        @Override
        protected Void doInBackground() {

            try {

                //Template
                File file = new File(Util.getAppPath() + "\\templates\\Profit.ods");
                final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);

                String sql =
                        "select o.number, o.datetime, ot.productCode, it.productName, n.name,"
                        + " i.number, i.datetime, ot.quantity, it.inPrice, n.inPrice, ot.price"
                        + " from Outcomingtable as ot"
                        + " left join Outcoming as o on ot.documentCode = o.code"
                        + " left join Incoming as i on i.code = ot.incomingCode"
                        + " left join Incomingtable as it on (it.documentCode = ot.incomingCode and it.productCode = ot.productCode)"
                        + " left join Nomenclature as n on n.code = ot.productCode"
                        + " where o.active = 1"
                        + " and date(o.datetime) >= " + Util.formatDateDB(startDate.getDate())
                        + " and date(o.datetime) <= " + Util.formatDateDB(endDate.getDate());
                if (employeeCode != null) {
                    sql += " and o.employee = " + employeeCode;
                }
                sql += " order by o.datetime";
                
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery(sql);

                publish("Создание отчета");

                ArrayList<HashMap> report = new ArrayList<>();

                int qs = 0;
                long is = 0;
                long os = 0;
                long ps = 0;

                int num = 0;
                while (rs.next()) {

                    HashMap line = new HashMap();
                    line.put("num", num + 1);
                    line.put("doc", "Расход №" + rs.getString(1));
                    line.put("date", Util.formatDate(rs.getDate(2)));
                    line.put("code", rs.getInt(3));
                    String name = rs.getString(4);
                    if (name != null) {
                        line.put("name", name);
                    } else {
                        line.put("name", rs.getString(5));
                    }
                    String idoc = "";
                    String in = rs.getString(6);
                    if (in != null) {
                        idoc += "Приход №" + in;
                        idoc += " от " + Util.formatDate(rs.getDate(7));
                    }
                    line.put("shipment", idoc);
                    Integer quantity = rs.getInt(8);
                    line.put("quantity", quantity);
                    Integer inPrice = rs.getInt(9);
                    if (inPrice == null || inPrice == 0) {
                        inPrice = rs.getInt(10);
                        if (inPrice == null) {
                            inPrice = 0;
                        }
                    }
                    int nds = Util.str2int(HUtil.getConstant("nds"));
                    long inSum = Math.round((double) inPrice * quantity * (100 + nds) / 100);
                    line.put("inSum", inSum);
                    is += inSum;
                    long sum = rs.getInt(11) * quantity;
                    line.put("sum", sum);
                    os += sum;
                    long profit = sum - inSum;
                    line.put("profit", profit);
                    ps += profit;
                    
                    report.add(line);

                    num++;
                }

                //Prepare template by creating necessary number of lines
                if (num > 1) {
                    sheet.duplicateRows(4, 1, num - 1);
                }

                //Fill the template from the prepared array
                for (int i = 0; i < num; i++) {

                    HashMap line = report.get(i);
                    sheet.getCellAt("B" + (i + 5)).setValue(line.get("num"));
                    sheet.getCellAt("C" + (i + 5)).setValue(line.get("doc"));
                    sheet.getCellAt("D" + (i + 5)).setValue(line.get("date"));
                    sheet.getCellAt("E" + (i + 5)).setValue(line.get("code"));
                    sheet.getCellAt("F" + (i + 5)).setValue(line.get("name"));
                    sheet.getCellAt("G" + (i + 5)).setValue(line.get("shipment"));
                    sheet.getCellAt("H" + (i + 5)).setValue(line.get("quantity"));
                    sheet.getCellAt("I" + (i + 5)).setValue(line.get("inSum"));
                    sheet.getCellAt("J" + (i + 5)).setValue(line.get("sum"));
                    sheet.getCellAt("K" + (i + 5)).setValue(line.get("profit"));
                }

                sheet.getCellAt("H" + (num + 5)).setValue(qs);
                sheet.getCellAt("I" + (num + 5)).setValue(is);
                sheet.getCellAt("J" + (num + 5)).setValue(os);
                sheet.getCellAt("K" + (num + 5)).setValue(ps);

                st.close();
                
                //Save the file, make sure the name is unique, open it
                String r = " " + Math.round(Math.random() * 100000);
                File outputFile = new File(
                        "temp\\Прибыль с " + sdf.format(startDate.getDate())
                        + " по " + sdf.format(endDate.getDate())
                        + r + ".ods");
                sheet.getSpreadSheet().saveAs(outputFile);
                Util.openDoc(
                        "temp\\Прибыль с " + sdf.format(startDate.getDate())
                        + " по " + sdf.format(endDate.getDate())
                        + r + ".ods");

            } catch (Exception e) {
                logger.error(e);
            }
            return null;
        }

        @Override
        protected void process(List<String> msgs) {
            for (int i = 0; i < msgs.size(); i++) {
                jlMsgs.setText(msgs.get(i));
            }
        }

        @Override
        protected void done() {
            profitReportRun = false;
            jlMsgs.setText("Выполнен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }

        protected void cancel() {
            profitReportRun = false;
            jlMsgs.setText("Остановлен");
            jbExe.setText("Сформировать");
            jbClose.setEnabled(true);
        }
    }

    @Action
    public void profit() {

        if (profitReportRun) {
            int a = JOptionPane.showOptionDialog(
                    this, "Остановить создание отчета?",
                    "Прибыль", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
            if (a == 0) {
                if (profitReportTask.cancel(true)) {
                    profitReportRun = false;
                    jlMsgs.setText("");
                    jbExe.setText("Сформировать");
                    jbClose.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(
                            this, "Невозможно прервать создание отчета!", "Остатки и обороты", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            profitReportTask = new ProfitReportTask();
            profitReportTask.execute();
            profitReportRun = true;
            jbExe.setText("Отмена");
            jbClose.setEnabled(false);
        }

    }
    
    @Action
    public void chooseEmployee() {
        EmployeeView ev = new EmployeeView(salesView, this, "Employee");
        salesView.getJDesktopPane().add(ev, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ev.setVisible(true);
        try {
            ev.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {
            logger.error(e);
        }
    }

    @Override
    public void setEmployee(Integer employeeCode, String name) {
        this.employeeCode = employeeCode;
        Session session = HUtil.getSession();
        Employee e = (Employee) HUtil.getElement("Employee", employeeCode, session);
        if (e != null) {
            jtfEmployee.setText(e.getName());
        }
        session.close();

    }
    
    @Action
    public void clearEmployee() {
        employeeCode = null;
        jtfEmployee.setText("");
    }

}