package sales;

import sales.auxiliarly.MyCellEditor;
import sales.interfaces.ISerialsView;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.hibernate.classic.Session;
import org.jdesktop.application.Action;
import org.jopendocument.dom.spreadsheet.Sheet;
import org.jopendocument.dom.spreadsheet.SpreadSheet;
import sales.catalogs.EmployeeView;
import sales.interfaces.IEmployee;
import sales.catalogs.NomenclatureView;
import sales.entity.Employee;
import sales.entity.Nomenclature;
import sales.entity.Outcoming;
import sales.entity.Outcomingtable;
import sales.entity.Serialtable;
import sales.interfaces.IFocus;
import sales.interfaces.IProductItem;
import sales.outcoming.SerialsView;
import sales.interfaces.IScannerView;
import sales.outcoming.OutcomingView;
import sales.util.HUtil;
import sales.util.Util;
import sales.util.fwMoney;

public class Workplace extends javax.swing.JInternalFrame implements IScannerView, IEmployee, ISerialsView, IProductItem, IFocus {

    private static final int KEY_PRESS_TIMEOUT = 100;
    private static final String path = "\\\\k3n\\Work\\nomenclature.txt";
    private static Logger logger = Logger.getLogger(SalesApp.class.getName());

    /** Creates new form Workplace */
    public Workplace(JDesktopPane desktop, SalesView salesView) {
        initComponents();

        this.desktop = desktop;
        this.salesView = salesView;

        table = new ArrayList();

        scanEnter = false;
        filter = "";

        jTextBox = new JTextField();
        jTextBox.addKeyListener(new KeyAdapter() {

            @Override
            public void keyTyped(KeyEvent e) {
                jTextBox.setEditable(Character.isDigit(e.getKeyChar()) || e.getKeyChar() == KeyEvent.VK_BACK_SPACE);
            }
        });


        showTable();

        clock = new Clock();
        clock.start();

        addInternalFrameListener(new JInternalFrameAdapter());

        serials = new ArrayList();

        employeeCode = null;
        jtfEmployee.setText(HUtil.getShortNameByCode(HUtil.getIntConstant("cashier")));

        jcbDocType.addItem("Касса за день");
        jcbDocType.addItem("Отдельный документ кассы");
        jcbDocType.addItem("Терминал за день");
        jcbDocType.addItem("Отдельный документ терминала");

        ActionListener taskPerformer = new ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                processScan();
                scanCode = "";
                scanEnter = false;
                ((Timer) evt.getSource()).stop();
            }
        };

        elapse = new Timer(KEY_PRESS_TIMEOUT, taskPerformer);
        scanEnter = false;
        scanCode = "";

        Util.setMoveRight(jtNomenclature);
    }

    private class JInternalFrameAdapter extends InternalFrameAdapter {

        @Override
        public void internalFrameActivated(InternalFrameEvent e) {
            JInternalFrame[] fs = desktop.getAllFrames();
            for (int i = 0; i < fs.length; i++) {
                if (fs[i] instanceof Workplace) {
                    fs[i].moveToBack();
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlDate = new javax.swing.JLabel();
        jlTime = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jlProductPrice = new javax.swing.JLabel();
        jlpProductPrice = new javax.swing.JLabel();
        jlSum = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaProductName = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtWorkplace = new javax.swing.JTable();
        jbDelete = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jbCommit = new javax.swing.JButton();
        jbReceipt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jtfEmployee = new javax.swing.JTextField();
        jbEmployee = new javax.swing.JButton();
        jbSerials = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jcbDocType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtNomenclature = new javax.swing.JTable();
        jbAddProduct = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jtfFilter = new javax.swing.JTextField();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(Workplace.class);
        setBackground(resourceMap.getColor("Workplace.background")); // NOI18N
        setBorder(null);
        setTitle(resourceMap.getString("Workplace.title")); // NOI18N
        setName("Workplace"); // NOI18N

        jlDate.setFont(resourceMap.getFont("jlDate.font")); // NOI18N
        jlDate.setForeground(resourceMap.getColor("jlDate.foreground")); // NOI18N
        jlDate.setText(resourceMap.getString("jlDate.text")); // NOI18N
        jlDate.setName("jlDate"); // NOI18N

        jlTime.setFont(resourceMap.getFont("jlDate.font")); // NOI18N
        jlTime.setForeground(resourceMap.getColor("jlTime.foreground")); // NOI18N
        jlTime.setText(resourceMap.getString("jlTime.text")); // NOI18N
        jlTime.setName("jlTime"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setName("jLabel1"); // NOI18N

        jlProductPrice.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jlProductPrice.setForeground(resourceMap.getColor("jlProductPrice.foreground")); // NOI18N
        jlProductPrice.setText(resourceMap.getString("jlProductPrice.text")); // NOI18N
        jlProductPrice.setName("jlProductPrice"); // NOI18N

        jlpProductPrice.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jlpProductPrice.setForeground(resourceMap.getColor("jlpProductPrice.foreground")); // NOI18N
        jlpProductPrice.setText(resourceMap.getString("jlpProductPrice.text")); // NOI18N
        jlpProductPrice.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jlpProductPrice.setName("jlpProductPrice"); // NOI18N

        jlSum.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jlSum.setForeground(resourceMap.getColor("jlpProductPrice.foreground")); // NOI18N
        jlSum.setText(resourceMap.getString("jlSum.text")); // NOI18N
        jlSum.setName("jlSum"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jtaProductName.setBackground(resourceMap.getColor("jtaProductName.background")); // NOI18N
        jtaProductName.setColumns(20);
        jtaProductName.setEditable(false);
        jtaProductName.setFont(resourceMap.getFont("jtaProductName.font")); // NOI18N
        jtaProductName.setForeground(resourceMap.getColor("jtaProductName.foreground")); // NOI18N
        jtaProductName.setLineWrap(true);
        jtaProductName.setRows(5);
        jtaProductName.setName("jtaProductName"); // NOI18N
        jScrollPane1.setViewportView(jtaProductName);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jtWorkplace.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtWorkplace.setCellSelectionEnabled(true);
        jtWorkplace.setFillsViewportHeight(true);
        jtWorkplace.setGridColor(resourceMap.getColor("jtWorkplace.gridColor")); // NOI18N
        jtWorkplace.setName("jtWorkplace"); // NOI18N
        jtWorkplace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtWorkplaceMouseClicked(evt);
            }
        });
        jtWorkplace.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtWorkplaceKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jtWorkplace);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(Workplace.class, this);
        jbDelete.setAction(actionMap.get("deleteItem")); // NOI18N
        jbDelete.setText(resourceMap.getString("jbDelete.text")); // NOI18N
        jbDelete.setName("jbDelete"); // NOI18N

        jbCancel.setAction(actionMap.get("clearSelected")); // NOI18N
        jbCancel.setText(resourceMap.getString("jbCancel.text")); // NOI18N
        jbCancel.setName("jbCancel"); // NOI18N

        jbCommit.setAction(actionMap.get("commit")); // NOI18N
        jbCommit.setText(resourceMap.getString("jbCommit.text")); // NOI18N
        jbCommit.setName("jbCommit"); // NOI18N

        jbReceipt.setAction(actionMap.get("printReceipt")); // NOI18N
        jbReceipt.setText(resourceMap.getString("jbReceipt.text")); // NOI18N
        jbReceipt.setName("jbReceipt"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jtfEmployee.setBackground(resourceMap.getColor("jtfEmployee.background")); // NOI18N
        jtfEmployee.setEditable(false);
        jtfEmployee.setText(resourceMap.getString("jtfEmployee.text")); // NOI18N
        jtfEmployee.setName("jtfEmployee"); // NOI18N

        jbEmployee.setAction(actionMap.get("chooseEmployee")); // NOI18N
        jbEmployee.setText(resourceMap.getString("jbEmployee.text")); // NOI18N
        jbEmployee.setName("jbEmployee"); // NOI18N

        jbSerials.setAction(actionMap.get("showSerials")); // NOI18N
        jbSerials.setText(resourceMap.getString("jbSerials.text")); // NOI18N
        jbSerials.setName("jbSerials"); // NOI18N

        jButton1.setAction(actionMap.get("printWarranty")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jcbDocType.setName("jcbDocType"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jtNomenclature.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtNomenclature.setCellSelectionEnabled(true);
        jtNomenclature.setFillsViewportHeight(true);
        jtNomenclature.setGridColor(resourceMap.getColor("jtNomenclature.gridColor")); // NOI18N
        jtNomenclature.setName("jtNomenclature"); // NOI18N
        jScrollPane3.setViewportView(jtNomenclature);

        jbAddProduct.setAction(actionMap.get("add")); // NOI18N
        jbAddProduct.setText(resourceMap.getString("jbAddProduct.text")); // NOI18N
        jbAddProduct.setName("jbAddProduct"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jtfFilter.setText(resourceMap.getString("jtfFilter.text")); // NOI18N
        jtfFilter.setName("jtfFilter"); // NOI18N
        jtfFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfFilterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1133, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbDocType, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbSerials)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbReceipt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbCommit))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jbAddProduct)
                                    .addComponent(jbDelete))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                            .addComponent(jbCancel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                            .addComponent(jlDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlProductPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlpProductPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlSum, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, Short.MAX_VALUE)
                        .addComponent(jlTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jlDate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlProductPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlSum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlpProductPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jbAddProduct)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbDelete)
                                .addGap(156, 156, 156))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCommit)
                    .addComponent(jtfEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbReceipt)
                    .addComponent(jButton1)
                    .addComponent(jbSerials)
                    .addComponent(jbEmployee)
                    .addComponent(jLabel2)
                    .addComponent(jcbDocType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jbCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtWorkplaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtWorkplaceMouseClicked
        if (evt.getClickCount() > 1) {
            if (jtWorkplace.columnAtPoint(evt.getPoint()) < 2) {
                JInternalFrame nv =
                        new NomenclatureView(
                        salesView, this, ((Outcomingtable) table.get(jtWorkplace.getSelectedRow())).getCode(),
                        jtWorkplace.getSelectedRow(), "", "", null, false);
                desktop.add(nv, javax.swing.JLayeredPane.DEFAULT_LAYER);
                nv.setVisible(true);
                try {
                    nv.setSelected(true);
                } catch (java.beans.PropertyVetoException e) {
                    logger.error(e);
                }
            }
        }
    }//GEN-LAST:event_jtWorkplaceMouseClicked

    private void processScan() {
        Session session = HUtil.getSession();
        String hql = "from Nomenclature n where n.scanCode = '" + scanCode + "'";
        List res = session.createQuery(hql).list();
        if (res.size() > 0) {
            Nomenclature n = (Nomenclature) res.get(0);
            addProductItem(n.getCode());
            try {
                BufferedWriter fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path), "cp1251"));
                fw.write(n.getPrice().toString() + " ");
                Integer inPrice = (int) Math.round((double) n.getInPrice()
                        * (100 + HUtil.getIntConstant("nds")) / 100 * 1.06);
                fw.write(inPrice.toString() + " ");
                fw.close();
            } catch (Exception e) {
                e.printStackTrace();
                logger.error(e);
            }
        }
        session.close();
    }

    private void jtWorkplaceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtWorkplaceKeyTyped

        if (evt.getKeyCode() == 155) {
            add();
        }
        if (evt.getKeyCode() == 127) {
            deleteItem();
        }

        if (scanEnter) {
            scanCode += evt.getKeyChar();
            if (elapse.isRunning()) {
                elapse.restart();
            } else {
                elapse.start();
            }
        } else {
            scanCode = "" + evt.getKeyChar();
            scanEnter = true;
        }

        jTextBox.setEditable(Character.isDigit(evt.getKeyChar())
                || evt.getKeyChar() == KeyEvent.VK_BACK_SPACE);
    }//GEN-LAST:event_jtWorkplaceKeyTyped

private void jtfFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfFilterKeyReleased
    filter = Util.getFilter(jtfFilter.getText(), new String[]{"name", "price", "scanCode"});
    showTable();

}//GEN-LAST:event_jtfFilterKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAddProduct;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCommit;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbEmployee;
    private javax.swing.JButton jbReceipt;
    private javax.swing.JButton jbSerials;
    private javax.swing.JComboBox jcbDocType;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlProductPrice;
    private javax.swing.JLabel jlSum;
    private javax.swing.JLabel jlTime;
    private javax.swing.JLabel jlpProductPrice;
    private javax.swing.JTable jtNomenclature;
    private javax.swing.JTable jtWorkplace;
    private javax.swing.JTextArea jtaProductName;
    private javax.swing.JTextField jtfEmployee;
    private javax.swing.JTextField jtfFilter;
    // End of variables declaration//GEN-END:variables
    private List table;
    private List tableNomenclature;
    private Clock clock;
    private JTextField jTextBox;
    private JDesktopPane desktop;
    private SalesView salesView;
    private Integer employeeCode;
    private ArrayList serials;
    private String filter;
    private Timer elapse;
    private String scanCode;
    private boolean scanEnter;

    class Clock implements Runnable {

        Thread runner;

        public void start() {
            if (runner == null) {
                runner = new Thread(this);
            }
            runner.start();
        }

        @Override
        public void run() {
            while (runner == Thread.currentThread()) {
                Calendar now = Calendar.getInstance();
                jlDate.setText((new SimpleDateFormat("        Дата: dd-MM-yy")).format(now.getTime()));
                jlTime.setText((new SimpleDateFormat("        Время: HH:mm")).format(now.getTime()));
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    System.err.println("Thread failed");
                }

            }
        }
    }

    private class MyTableModel extends DefaultTableModel {

        public MyTableModel(Vector table, Vector header) {
            super(table, header);
        }

        @Override
        public boolean isCellEditable(int r, int c) {
            return c == 4 || c == 5;
        }
    }

    private void showTable() {

        int r = jtWorkplace.getSelectedRow();

        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("№");
        tableHeaders.add("Наименование");
        tableHeaders.add("Ед.изм.");
        tableHeaders.add("Гарантия");
        tableHeaders.add("Цена");
        tableHeaders.add("Кол-во");
        tableHeaders.add("Сумма");

        Integer sum = 0;
        try {
            Session session = HUtil.getSession();
            for (int j = 0; j < table.size(); j++) {
                Outcomingtable o = (Outcomingtable) table.get(j);
                Vector<Object> oneRow = new Vector<Object>();
                Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", o.getProductCode(), session);
                oneRow.add(j + 1);
                oneRow.add(n.getName());
                oneRow.add(n.getUnit());
                oneRow.add(n.getWarranty());
                oneRow.add(o.getPrice());
                oneRow.add(o.getQuantity());
                oneRow.add(o.getAmount());
                tableData.add(oneRow);
                sum += o.getAmount();
            }
            if (sum > 0) {
                jlSum.setText((new DecimalFormat("#,###")).format(sum));
            } else {
                jlSum.setText("");
            }
            session.close();
        } catch (Exception e) {
            logger.error(e);
        }
        jtWorkplace.setModel(new MyTableModel(tableData, tableHeaders));
        Util.autoResizeColWidth(jtWorkplace);

        jtWorkplace.getModel().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getColumn() == 4) {
                    int r = e.getFirstRow();
                    Outcomingtable o = (Outcomingtable) table.get(r);
                    o.setPrice(new Integer(jtWorkplace.getValueAt(r, 4).toString()));
                    o.setAmount(o.getPrice() * o.getQuantity());
                    table.set(r, o);
                    showTable();
                    Rectangle rect = jtWorkplace.getCellRect(r, 4, true);
                    jtWorkplace.scrollRectToVisible(rect);
                    jtWorkplace.getSelectionModel().addSelectionInterval(r, r);
                    jtWorkplace.getColumnModel().getSelectionModel().setSelectionInterval(4, 4);
                } else if (e.getColumn() == 5) {
                    int r = e.getFirstRow();
                    Outcomingtable o = (Outcomingtable) table.get(r);
                    o.setQuantity(new Integer(jtWorkplace.getValueAt(r, 5).toString()));
                    o.setAmount(o.getPrice() * o.getQuantity());
                    table.set(r, o);
                    showTable();
                    Rectangle rect = jtWorkplace.getCellRect(r, 5, true);
                    jtWorkplace.scrollRectToVisible(rect);
                    jtWorkplace.getSelectionModel().addSelectionInterval(r, r);
                    jtWorkplace.getColumnModel().getSelectionModel().setSelectionInterval(5, 5);
                }
            }
        });
        jtWorkplace.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return; // if you don't want to handle intermediate selections
                }
                int row = jtWorkplace.getSelectedRow();
                if (row != -1) {
                    Session session = HUtil.getSession();
                    Nomenclature n =
                            (Nomenclature) HUtil.getElement(
                            "Nomenclature", ((Outcomingtable) table.get(row)).getProductCode(), session);
                    jtaProductName.setText(n.getName());
                    jlProductPrice.setText((new DecimalFormat("#,###")).format(n.getPrice()));
                    session.close();
                }
            }
        });

        jtWorkplace.getColumnModel().getColumn(4).setCellEditor(new MyCellEditor(jTextBox));
        jtWorkplace.getColumnModel().getColumn(5).setCellEditor(new MyCellEditor(jTextBox));

        jtWorkplace.getColumnModel().getColumn(0).setMinWidth(40);
        jtWorkplace.getColumnModel().getColumn(0).setMaxWidth(40);

        if (r != -1) {
            if (r >= table.size()) {
                r = table.size() - 1;
            }
            Rectangle rect = jtWorkplace.getCellRect(r, 0, true);
            jtWorkplace.scrollRectToVisible(rect);
            jtWorkplace.getSelectionModel().clearSelection();
            jtWorkplace.getSelectionModel().setSelectionInterval(r, r);
            jtWorkplace.getColumnModel().getSelectionModel().setSelectionInterval(0, 6);
        }

        showNomenclature();
        
    }

    private class NomenclatureTableModel extends DefaultTableModel {

        public NomenclatureTableModel(Vector table, Vector header) {
            super(table, header);
        }

        @Override
        public boolean isCellEditable(int r, int c) {
            return false;
        }
    }

    public void showNomenclature() {

        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Код");
        tableHeaders.add("Наименование");
        tableHeaders.add("Кол-во");
        tableHeaders.add("Цена");

        try {
            tableNomenclature = HUtil.executeHql("from Nomenclature x where x.active = 0" + filter + " order by x.code");
            for (int i = 0; i < tableNomenclature.size(); i++) {

                Nomenclature n = (Nomenclature) tableNomenclature.get(i);
                Vector<Object> oneRow = new Vector<Object>();
                oneRow.add(n.getCode());
                oneRow.add(n.getName());
                if (n.getQuantity() != null && n.getQuantity() > 0) {
                    oneRow.add(n.getQuantity());
                } else {
                    oneRow.add("");
                }
                if (n.getPrice() != null && n.getPrice() > 0) {
                    oneRow.add(n.getPrice());
                } else {
                    oneRow.add("");
                }
                tableData.add(oneRow);
            }

        } catch (Exception e) {
            logger.error(e);
        }

        jtNomenclature.setModel(new NomenclatureTableModel(tableData, tableHeaders));

        Util.autoResizeColWidth(jtNomenclature);

        jtNomenclature.getColumnModel().getColumn(0).setMinWidth(40);
        jtNomenclature.getColumnModel().getColumn(0).setMaxWidth(40);
        jtNomenclature.getColumnModel().getColumn(2).setMinWidth(50);
        jtNomenclature.getColumnModel().getColumn(2).setMaxWidth(50);
        jtNomenclature.getColumnModel().getColumn(3).setMinWidth(50);
        jtNomenclature.getColumnModel().getColumn(3).setMaxWidth(50);

        jtNomenclature.getSelectionModel().setSelectionInterval(0, 0);
        jtNomenclature.getColumnModel().getSelectionModel().setSelectionInterval(0, 2);
    }

    @Override
    public boolean getScanEnter() {
        return scanEnter;
    }

    @Override
    public void setScanEnter(boolean scanEnter) {
        this.scanEnter = scanEnter;
    }

    @Override
    public String getScanCode() {
        return scanCode;
    }

    @Override
    public void setScanCode(String scanCode) {
        this.scanCode = scanCode;
    }

    @Override
    public void useScancode() {
        if (Util.openedWins == 0) {
            try {
                Session session = HUtil.getSession();
                String hql = "from Nomenclature n where n.scanCode = '" + scanCode + "'";

                List res = session.createQuery(hql).list();
                if (res.size() > 0) {
                    Nomenclature n = (Nomenclature) res.get(0);
                    int quantity = HUtil.getBalance(n.getCode());
                    Object newQuantity =
                            JOptionPane.showInputDialog(
                            null,
                            "Введите количество, остаток: " + quantity,
                            "Количество",
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            null,
                            1);
                    if (newQuantity != null) {
                        jtaProductName.setText(n.getName());
                        jlProductPrice.setText((new DecimalFormat("#,###")).format(n.getPrice()));
                        Outcomingtable ot = new Outcomingtable();
                        ot.setProductCode(n.getCode());
                        ot.setInPrice(n.getInPrice());
                        ot.setPrice(n.getPrice());
                        ot.setSurcharge(n.getPrice() - n.getInPrice());
                        if (Util.checkNumber((String) newQuantity)) {
                            ot.setQuantity(new Integer((String) newQuantity));
                        } else {
                            ot.setQuantity(1);
                        }
                        ot.setAmount(ot.getPrice() * ot.getQuantity());
                        table.add(ot);
                        showTable();
                        jtWorkplace.setRowSelectionInterval(table.size() - 1, table.size() - 1);
                    }
                }
                session.close();
            } catch (Exception e) {
                logger.error(e);
            }
        }
    }
    
    @Action
    public void commit() {
        commit(true);
    }

    public void commit(boolean msg) {

        if (table.size() > 0) {

            try {
                Session session = HUtil.getSession();
                Date now = Calendar.getInstance().getTime();
                List res = new ArrayList();
                if (jcbDocType.getSelectedIndex() == 0) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String hql =
                            "from Outcoming o"
                            + " where Date(o.datetime) = '" + sdf.format(now) + "'"
                            + " and o.documentType = 4"
                            + " and o.active != 2";
                    res = session.createQuery(hql).list();
                } else if (jcbDocType.getSelectedIndex() == 2) {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    String hql =
                            "from Outcoming o"
                            + " where Date(o.datetime) = '" + sdf.format(now) + "'"
                            + " and o.documentType = 5"
                            + " and o.active != 2";
                    res = session.createQuery(hql).list();
                }
                Outcoming o = new Outcoming();
                if (res.size() > 0) {
                    o = (Outcoming) res.get(0);
                } else {
                    o.setDatetime(now);
                    if (jcbDocType.getSelectedIndex() == 0) {
                        o.setDocumentType(4);
                    } else if (jcbDocType.getSelectedIndex() == 1) {
                        o.setDocumentType(2);
                    } else if (jcbDocType.getSelectedIndex() == 2) {
                        o.setDocumentType(5);
                    } else if (jcbDocType.getSelectedIndex() == 3) {
                        o.setDocumentType(1);
                    }
                    o.setNumber(HUtil.getNextDocNumber("Outcoming", "x.documentType = 2", session));
                    o.setInvoiceNumber("");
                    o.setTnnumber("");
                    o.setActive(1);
                    session.beginTransaction();
                    session.saveOrUpdate(o);
                    session.getTransaction().commit();
                }
                session.beginTransaction();
                res = session.createSQLQuery(
                        "SELECT MAX(ot.line) FROM Outcomingtable AS ot, Outcoming o"
                        + " WHERE ot.documentCode = o.code"
                        + " AND o.code = " + o.getCode()).list();
                int num = Util.getIntObj(res.get(0)) + 1;
                for (int i = 0; i < table.size(); i++) {
                    Outcomingtable ot = (Outcomingtable) table.get(i);
                    ot.setDocumentCode(o.getCode());
                    ot.setLine(num++);
                    session.saveOrUpdate(ot);
                    Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", ot.getProductCode(), session);
                    n.setQuantity(n.getQuantity() - ot.getQuantity());
                    session.update(n);
                }
                session.getTransaction().commit();

                session.beginTransaction();
                String hql = "from Serialtable st where st.documentCode = " + o.getCode();
                res = session.createQuery(hql).list();
                for (int i = 0; i < res.size(); i++) {
                    session.delete((Serialtable) res.get(i));
                }
                session.getTransaction().commit();

                res = session.createQuery("from Outcomingtable ot where ot.documentCode = " + o.getCode()).list();
                int pn = res.size();

                session.beginTransaction();
                for (int i = 0; i < serials.size(); i++) {
                    ArrayList s = (ArrayList) serials.get(i);
                    for (int j = 0; j < s.size(); j++) {
                        Serialtable st = (Serialtable) s.get(j);
                        st.setDocumentCode(o.getCode());
                        st.setPosition(pn - 1 + i);
                        session.save(st);
                    }
                }
                session.getTransaction().commit();

                session.close();

                table.clear();

                showTable();

                jtaProductName.setText("");
                jlProductPrice.setText("");
                if (msg) {
                    JOptionPane.showMessageDialog(this, "Покупка завершена!");
                }

                if (Util.openedWins == 0) {
                    setFocus();
                }
                Util.updateJournals(salesView, OutcomingView.class);

            } catch (Exception e) {
                logger.error(e);
            }
        }
    }

    private void clear() {
        table.clear();
        serials.clear();
        showTable();
        jlProductPrice.setText("");
        jtaProductName.setText("");
    }

    public void clear(boolean msg) {

        if (msg) {
            int a = JOptionPane.showOptionDialog(
                    this, "Очистить таблицу?", "Отмена", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Нет");
            if (a == 0) {
                clear();
            }
        } else {
            clear();
        }
        setFocus();
    }

    @Action
    public void clearSelected() {
        clear(true);
    }

    @Action
    public void add() {

        int[] rows = jtNomenclature.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            addProductItem(((Nomenclature) tableNomenclature.get(rows[i])).getCode());
        }
    }

    @Override
    public void addProductItem(Integer productCode) {
        Session session = HUtil.getSession();
        Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", productCode, session);
        addProductItem(n);
        session.close();
    }

    public void addProductItem(String scanCode) {
        Session session = HUtil.getSession();
        String sql = "from Nomenclature where scanCode = '" + scanCode + "'";
        List res = HUtil.executeHql(sql, session);
        if (res.size() > 0) {
            Nomenclature n = (Nomenclature) res.get(0);
            addProductItem(n);
        }
        session.close();
    }

    public void addProductItem(Nomenclature n) {

        if (n != null) {

            boolean found = false;

            for (int i = 0; i < table.size(); i++) {
                Outcomingtable ot = (Outcomingtable) table.get(i);
                found = ot.getProductCode().equals(n.getCode());
                if (found) {
                    ot.setQuantity(ot.getQuantity() + 1);
                    showTable();
                    Util.go2rect(jtWorkplace, i);
                    break;
                }
            }

            if (!found) {

                Outcomingtable ot = new Outcomingtable();
                ot.setProductCode(n.getCode());
                ot.setInPrice(n.getInPrice());
                ot.setPrice(n.getPrice());
                ot.setSurcharge(n.getPrice() - n.getInPrice());
                ot.setQuantity(1);
                ot.setAmount(ot.getPrice() * ot.getQuantity());
                table.add(ot);
                serials.add(new ArrayList());
                showTable();
                jlProductPrice.setText((new DecimalFormat("#,###")).format(n.getPrice()));
                jtaProductName.setText(n.getName());

                Util.go2rect(jtWorkplace, jtWorkplace.getRowCount() - 1);
            }

            setFocus();
        }
    }

    @Override
    public void setProductItem(Integer productCode, int row) {
        Session session = HUtil.getSession();
        Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", productCode, session);
        if (n != null) {
            table.set(row, n);
            showTable();
            jlProductPrice.setText((new DecimalFormat("#,###")).format(n.getPrice()));
            jtaProductName.setText(n.getName());
        }
        session.close();
    }

    @Override
    public void setProductItemPart(Integer productCode, int row) {
        setProductItem(productCode, row);
    }

    @Action
    public void deleteItem() {

        int[] rows = jtWorkplace.getSelectedRows();

        int d = 0;
        for (int i = 0; i < rows.length; i++) {
            table.remove(rows[i] - d);
            d++;
        }
        showTable();
        jlProductPrice.setText("");
        jtaProductName.setText("");

        setFocus();
    }

    @Override
    public void setFocus() {
        requestFocusInWindow();
        jtWorkplace.setRequestFocusEnabled(true);
        jtWorkplace.requestFocus();
    }

    @Action
    public void exit() {
    }

    @Action
    public void printReceipt() {
        try {
            File file = new File(Util.getAppPath() + "\\templates\\Receipt.ods");
            final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);
            sheet.getCellAt("A1").setValue(HUtil.getConstant("name"));
            sheet.getCellAt("A2").setValue("Адрес: " + HUtil.getConstant("address"));
            sheet.getCellAt("A3").setValue(
                    "Р/сч: " + HUtil.getConstant("account")
                    + " в " + HUtil.getConstant("bank")
                    + ", код " + HUtil.getConstant("bankCode")
                    + ", УНН: " + HUtil.getConstant("unt"));
            sheet.getCellAt("A7").setValue("Дата " + Util.date2String(Calendar.getInstance().getTime()));
            int ts = table.size();
            if (ts > 1) {
                sheet.duplicateRows(9, 1, ts - 1);
            }
            int amount = 0;
            int i;
            for (i = 0; i < ts; i++) {
                sheet.getCellAt("A" + (10 + i)).setValue(i + 1);
                sheet.getCellAt("B" + (10 + i)).setValue(jtWorkplace.getValueAt(i, 1));
                sheet.getCellAt("C" + (10 + i)).setValue(jtWorkplace.getValueAt(i, 2));
                sheet.getCellAt("D" + (10 + i)).setValue(jtWorkplace.getValueAt(i, 5));
                sheet.getCellAt("E" + (10 + i)).setValue(jtWorkplace.getValueAt(i, 4));
                sheet.getCellAt("F" + (10 + i)).setValue(jtWorkplace.getValueAt(i, 6));
                sheet.getCellAt("H" + (10 + i)).setValue(jtWorkplace.getValueAt(i, 6));
                sheet.getCellAt("I" + (10 + i)).setValue(jtWorkplace.getValueAt(i, 6));
                amount += (Integer) jtWorkplace.getValueAt(i, 6);
            }
            sheet.getCellAt("F" + (10 + i)).setValue(amount);
            sheet.getCellAt("H" + (10 + i)).setValue(amount);
            sheet.getCellAt("I" + (10 + i)).setValue(amount);
            if (employeeCode != null) {
                Session session = HUtil.getSession();
                Employee e = (Employee) HUtil.getElement("Employee", employeeCode, session);
                session.close();
                if (e != null) {
                    sheet.getCellAt("B" + (16 + i)).setValue("Продавец_____________________________ " + e.getShortName());
                } else {
                    sheet.getCellAt("B" + (16 + i)).setValue("Поставщик_____________________________ " + HUtil.getShortNameByCode(HUtil.getIntConstant("cashier")));
                }
            }
            fwMoney mo = new fwMoney(amount);
            sheet.getCellAt("B" + (13 + i)).setValue("Всего к оплате на сумму с НДС: " + mo.num2str(true));

            if (Util.openedWins == 0) {
                setFocus();
            }

            String r = " " + Math.round(Math.random() * 100000);
            File outputFile = new File("temp\\Товарный чек" + r + ".ods");
            sheet.getSpreadSheet().saveAs(outputFile);
            Util.openDoc("temp\\Товарный чек" + r + ".ods");
        } catch (Exception e) {
            logger.error(e);
        }
    }

    @Action
    public void chooseEmployee() {
        EmployeeView ev = new EmployeeView(salesView, this, "Employee");
        salesView.getJDesktopPane().add(ev, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ev.setVisible(true);
        try {
            ev.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {
            logger.error(e);
        }
    }

    @Override
    public void setEmployee(Integer employeeCode, String name) {
        this.employeeCode = employeeCode;
        Session session = HUtil.getSession();
        Employee e = (Employee) HUtil.getElement("Employee", employeeCode, session);
        if (e != null) {
            jtfEmployee.setText(e.getShortName());
        }
        session.close();

        if (Util.openedWins == 0) {
            setFocus();
        }
    }

    @Action
    public void showSerials() {
        int r = jtWorkplace.getSelectedRow();
        if (r != -1) {
            SerialsView sv =
                    new SerialsView(
                    salesView,
                    this,
                    ((Outcomingtable) table.get(r)).getProductCode(),
                    (ArrayList) serials.get(r),
                    0,
                    r);
            salesView.getJDesktopPane().add(sv, javax.swing.JLayeredPane.DEFAULT_LAYER);
            sv.setVisible(true);
            try {
                sv.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {
                logger.error(e);
            }
        }
        if (Util.openedWins == 0) {
            setFocus();
        }
    }

    @Override
    public void setSerials(Integer row, ArrayList s) {
        serials.set(row, s);
        Outcomingtable ot = (Outcomingtable) table.get(row);
        if (s.size() > ot.getQuantity()) {
            ot.setQuantity(s.size());
        }
        table.set(row, ot);
        showTable();
        if (Util.openedWins == 0) {
            setFocus();
        }
    }

    @Action
    public void printWarranty() {
        try {
            File file = new File(Util.getAppPath() + "\\templates\\Warranty.ods");
            final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);
            sheet.getCellAt("B4").setValue(
                    " ГАРАНТИЙНЫЙ ТАЛОН  ОТ  " + Util.date2String(Calendar.getInstance().getTime()));
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yy");
            Session session = HUtil.getSession();
            ArrayList print = new ArrayList();
            for (int i = 0; i < table.size(); i++) {
                Outcomingtable ot = (Outcomingtable) table.get(i);
                Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", ot.getProductCode(), session);
                ArrayList st = (ArrayList) serials.get(i);
                if (st.size() > 0) {
                    for (int j = 0; j < st.size(); j++) {
                        ArrayList row = new ArrayList();
                        if (n != null) {
                            row.add(n.getName());
                        } else {
                            row.add("");
                        }
                        row.add(((Serialtable) st.get(j)).getSerial());
                        if (n != null && n.getWarranty() != null) {
                            row.add(n.getWarranty());
                        } else {
                            row.add("");
                        }
                        print.add(row);
                    }
                }
                for (int j = 0; j < ot.getQuantity() - st.size(); j++) {
                    ArrayList row = new ArrayList();
                    if (n != null) {
                        row.add(n.getName());
                    } else {
                        row.add("");
                    }
                    row.add("");
                    if (n != null && n.getWarranty() != null) {
                        row.add(n.getWarranty());
                    } else {
                        row.add("");
                    }
                    print.add(row);
                }
            }

            int ts = print.size();
            if (ts > 1) {
                sheet.duplicateRows(6, 1, ts - 1);
            }
            for (int i = 0; i < ts; i++) {
                ArrayList row = (ArrayList) print.get(i);
                sheet.getCellAt("B" + (i + 7)).setValue(row.get(0));
                sheet.getCellAt("D" + (i + 7)).setValue(row.get(1));
                sheet.getCellAt("E" + (i + 7)).setValue(row.get(2));
            }
            sheet.getCellAt("D" + (15 + ((ts > 0) ? ts : 1))).setValue(sdf.format(Calendar.getInstance().getTime()));

            if (Util.openedWins == 0) {
                setFocus();
            }

            String r = " " + Math.round(Math.random() * 100000);
            File outputFile = new File("temp\\Гарантия" + r + ".ods");
            sheet.getSpreadSheet().saveAs(outputFile);
            Util.openDoc("temp\\Гарантия" + r + ".ods");
        } catch (Exception e) {
            logger.error(e);
        }
    }

    private void changeDelStatus(int status, int r) {
        try {
            Session session = HUtil.getSession();
            session.beginTransaction();
            Nomenclature el = (Nomenclature) HUtil.getElement("Nomenclature", ((Nomenclature) tableNomenclature.get(r)).getCode(), session);
            if (el != null) {
                el.setActive(status);
                session.saveOrUpdate(el);
            }
            session.getTransaction().commit();
            session.close();
        } catch (Exception e) {
            logger.error(e);
        }
    }

    @Action
    public void deleteEl() {
        int r = jtNomenclature.getSelectedRow();
        if (r != -1) {
            int a = JOptionPane.showOptionDialog(
                    this, "Удалить элемент " + ((Nomenclature) tableNomenclature.get(r)).getName() + "?", "Удаление", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{
                        "Да", "Нет"}, "Нет");
            if (a == 0) {
                changeDelStatus(2, r);
                showNomenclature();
            }
        }
    }

}
