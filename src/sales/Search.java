/*
 * Search.java
 *
 * Created on 10.11.2011, 15:13:52
 */
package sales;

import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.hibernate.classic.Session;
import org.jdesktop.application.Action;
import sales.entity.Contractors;
import sales.entity.Incoming;
import sales.entity.Incomingtable;
import sales.entity.Inventory;
import sales.entity.Inventorytable;
import sales.entity.Nomenclature;
import sales.entity.Outcoming;
import sales.entity.Outcomingtable;
import sales.entity.Repricing;
import sales.entity.Repricingtable;
import sales.entity.Suppliers;
import sales.incoming.IncomingDocView;
import sales.interfaces.IClose;
import sales.inventory.InventoryDocView;
import sales.outcoming.OutcomingDocView;
import sales.repricing.RepricingDocView;
import sales.util.HUtil;
import sales.util.Util;

public class Search extends javax.swing.JInternalFrame implements IClose {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());

    /** Creates new form Search */
    public Search(SalesView salesView) {

        initComponents();

        Util.initJIF(this, "Глобальный поиск", salesView, salesView);
        Util.initJTable(jtSearch);

        this.salesView = salesView;

        find();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfFilter = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtSearch = new javax.swing.JTable();
        jbClose = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getResourceMap(Search.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jtfFilter.setText(resourceMap.getString("jtfFilter.text")); // NOI18N
        jtfFilter.setName("jtfFilter"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getActionMap(Search.class, this);
        jButton1.setAction(actionMap.get("search")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jtSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtSearch.setName("jtSearch"); // NOI18N
        jtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtSearchMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtSearch);

        jbClose.setAction(actionMap.get("close")); // NOI18N
        jbClose.setText(resourceMap.getString("jbClose.text")); // NOI18N
        jbClose.setName("jbClose"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jbClose))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtSearchMouseClicked
        openDoc(evt);
    }//GEN-LAST:event_jtSearchMouseClicked

    @Action
    public void search() {
        find();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbClose;
    private javax.swing.JTable jtSearch;
    private javax.swing.JTextField jtfFilter;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;
    private List docs;
    private List products;

    private class MyTableModel extends DefaultTableModel {

        public MyTableModel(Vector table, Vector header) {
            super(table, header);
        }

        @Override
        public boolean isCellEditable(int r, int c) {
            return false;
        }
    }

    //global search
    private void find() {

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yy");

        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Проведен");
        tableHeaders.add("Тип");
        tableHeaders.add("Номер");
        tableHeaders.add("Дата");
        tableHeaders.add("Наименование или контрагент");
        tableHeaders.add("Кол-во");
        tableHeaders.add("Цена");
        tableHeaders.add("Штрих код");
        Session session = HUtil.getSession();

        docs = new ArrayList();
        products = new ArrayList();

        if (!jtfFilter.getText().isEmpty()) {

            //search in nomenclature
            String filter = Util.getFilter(jtfFilter.getText(), new String[]{"name", "price", "scanCode"});
            List noms = HUtil.executeHql("from Nomenclature x where x.active = 0" + filter, session);

            //search in suppliers
            filter = Util.getFilter(jtfFilter.getText(), new String[]{"name", "address", "account", "unt"});
            List supps = HUtil.executeHql("from Suppliers x where x.active = 0" + filter, session);

            //search in contractors
            List cons = HUtil.executeHql("from Contractors x where x.active = 0" + filter, session);

            //check if not empty
            if (noms != null || supps != null || cons != null) {

                String sqlFilterNom = "";

                if (noms != null) {
                    //found nomencluture, list it
                    int ns = noms.size();
                    for (int i = 0; i < ns; i++) {
                        sqlFilterNom += " x.productCode = " + ((Nomenclature) noms.get(i)).getCode();
                        if (i < ns - 1) {
                            sqlFilterNom += " or";
                        }
                    }
                }

                String sqlFilterSupp = "";
                if (supps != null) {
                    //found suppliers, list it
                    int ss = supps.size();
                    for (int i = 0; i < ss; i++) {
                        sqlFilterSupp += " x.contractor = " + ((Suppliers) supps.get(i)).getCode();
                        if (i < ss - 1) {
                            sqlFilterSupp += " or";
                        }
                    }
                }

                String sqlFilterCon = "";
                if (cons != null) {
                    //found contractors, list it
                    int cs = cons.size();
                    for (int i = 0; i < cs; i++) {
                        sqlFilterCon += " x.contractor = " + ((Contractors) cons.get(i)).getCode();
                        if (i < cs - 1) {
                            sqlFilterCon += " or";
                        }
                    }
                }

                //Incoming docs, found in nomenclature
                if (!sqlFilterNom.isEmpty()) {
                    String sql = "from Incomingtable x";
                    if (!sqlFilterNom.isEmpty()) {
                        sql += " where" + sqlFilterNom;
                    }
                    List its = HUtil.executeHql(sql, session);

                    if (its != null) {
                        for (int i = 0; i < its.size(); i++) {
                            Incomingtable it = (Incomingtable) its.get(i);
                            Incoming in = (Incoming) HUtil.getElement("Incoming", it.getDocumentCode());
                            if (in != null) {
                                docs.add(in);
                                Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", ((Incomingtable) its.get(i)).getProductCode());
                                products.add(n.getCode());
                                Vector<Object> oneRow = new Vector<Object>();
                                if (in.getActive() == 0) {
                                    oneRow.add("");
                                } else if (in.getActive() == 1) {
                                    oneRow.add("V");
                                } else if (in.getActive() == 2) {
                                    oneRow.add("X");
                                }
                                if (in.getType() == 0) {
                                    oneRow.add("Приход");
                                } else if (in.getType() == 1) {
                                    oneRow.add("Инвентаризация");
                                } else if (in.getType() == 2) {
                                    oneRow.add("Ввод остатков");
                                }
                                oneRow.add(in.getNumber());
                                oneRow.add(sdf.format(in.getDatetime()));
                                oneRow.add(it.getProductName());
                                oneRow.add(it.getQuantity());
                                oneRow.add(it.getPrice());
                                oneRow.add(n.getScanCode());
                                tableData.add(oneRow);
                            }
                        }
                    }
                }


                //Incoming docs, found in suppliers
                if (!sqlFilterSupp.isEmpty()) {
                    String sql = "from Incoming x where" + sqlFilterSupp;
                    List ins = HUtil.executeHql(sql, session);

                    if (ins != null) {
                        for (int i = 0; i < ins.size(); i++) {
                            Incoming in = (Incoming) ins.get(i);
                            docs.add(in);
                            products.add(null);
                            Suppliers s = (Suppliers) HUtil.getElement("Suppliers", in.getContractor());
                            Vector<Object> oneRow = new Vector<Object>();
                            if (in.getActive() == 0) {
                                oneRow.add("");
                            } else if (in.getActive() == 1) {
                                oneRow.add("V");
                            } else if (in.getActive() == 2) {
                                oneRow.add("X");
                            }
                            if (in.getType() == 0) {
                                oneRow.add("Приход");
                            } else if (in.getType() == 1) {
                                oneRow.add("Инвентаризация");
                            } else if (in.getType() == 2) {
                                oneRow.add("Ввод остатков");
                            }
                            oneRow.add(in.getNumber());
                            oneRow.add(sdf.format(in.getDatetime()));
                            oneRow.add(s.getName());
                            oneRow.add("");
                            oneRow.add("");
                            oneRow.add("");
                            tableData.add(oneRow);
                        }
                    }
                }

                //Outcoming docs, found in nomenclature
                if (!sqlFilterNom.isEmpty()) {
                    String sql = "from Outcomingtable x";
                    sql += " where" + sqlFilterNom;
                    List ots = HUtil.executeHql(sql, session);

                    if (ots != null) {
                        for (int i = 0; i < ots.size(); i++) {
                            Outcomingtable ot = (Outcomingtable) ots.get(i);
                            Outcoming out = (Outcoming) HUtil.getElement("Outcoming", ot.getDocumentCode());
                            if (out != null) {
                                docs.add(out);
                                Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", ((Outcomingtable) ots.get(i)).getProductCode());
                                products.add(n.getCode());
                                Vector<Object> oneRow = new Vector<Object>();
                                if (out.getActive() == 0) {
                                    oneRow.add("");
                                } else if (out.getActive() == 1) {
                                    oneRow.add("V");
                                } else if (out.getActive() == 2) {
                                    oneRow.add("X");
                                }
                                if (out.getDocumentType() == 0) {
                                    oneRow.add("ТН");
                                } else if (out.getDocumentType() == 1) {
                                    oneRow.add("Терминал");
                                } else if (out.getDocumentType() == 2) {
                                    oneRow.add("Касса");
                                } else if (out.getDocumentType() == 3) {
                                    oneRow.add("Инвентаризация");
                                } else if (out.getDocumentType() == 4) {
                                    oneRow.add("Касса за день");
                                } else if (out.getDocumentType() == 5) {
                                    oneRow.add("Терминал за день");
                                }
                                oneRow.add(out.getNumber());
                                oneRow.add(sdf.format(out.getDatetime()));
                                oneRow.add(n.getName());
                                oneRow.add(ot.getQuantity());
                                oneRow.add(ot.getPrice());
                                oneRow.add(n.getScanCode());
                                tableData.add(oneRow);
                            }
                        }
                    }
                }

                //Outcoming docs, found in contractors
                if (!sqlFilterCon.isEmpty()) {
                    String sql = "from Outcoming x where" + sqlFilterCon;
                    List outs = HUtil.executeHql(sql, session);

                    if (outs != null) {
                        for (int i = 0; i < outs.size(); i++) {
                            Outcoming out = (Outcoming) outs.get(i);
                            docs.add(out);
                            products.add(null);
                            Contractors c = (Contractors) HUtil.getElement("Contractors", out.getContractor());
                            Vector<Object> oneRow = new Vector<Object>();
                            if (out.getActive() == 0) {
                                oneRow.add("");
                            } else if (out.getActive() == 1) {
                                oneRow.add("V");
                            } else if (out.getActive() == 2) {
                                oneRow.add("X");
                            }
                            if (out.getDocumentType() == 0) {
                                oneRow.add("ТН");
                            } else if (out.getDocumentType() == 1) {
                                oneRow.add("Терминал");
                            } else if (out.getDocumentType() == 2) {
                                oneRow.add("Касса");
                            } else if (out.getDocumentType() == 3) {
                                oneRow.add("Инвентаризация");
                            } else if (out.getDocumentType() == 4) {
                                oneRow.add("Касса за день");
                            } else if (out.getDocumentType() == 5) {
                                oneRow.add("Терминал за день");
                            }
                            oneRow.add(out.getNumber());
                            oneRow.add(sdf.format(out.getDatetime()));
                            oneRow.add(c.getName());
                            oneRow.add("");
                            oneRow.add("");
                            oneRow.add("");
                            tableData.add(oneRow);
                        }
                    }
                }

                //Repricing docs
                if (!sqlFilterNom.isEmpty()) {
                    String sql = "from Repricingtable x";
                    sql += " where" + sqlFilterNom;
                    List reps = HUtil.executeHql(sql, session);


                    if (reps != null) {
                        for (int i = 0; i < reps.size(); i++) {
                            Repricingtable rt = (Repricingtable) reps.get(i);
                            Repricing rep = (Repricing) HUtil.getElement("Repricing", rt.getDocumentCode());
                            if (rep != null) {
                                docs.add(rep);
                                Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", ((Repricingtable) reps.get(i)).getProductCode());
                                products.add(n.getCode());
                                Vector<Object> oneRow = new Vector<Object>();
                                if (rep.getActive() == 0) {
                                    oneRow.add("");
                                } else if (rep.getActive() == 1) {
                                    oneRow.add("V");
                                } else if (rep.getActive() == 2) {
                                    oneRow.add("X");
                                }
                                oneRow.add("Акт переоценки");
                                oneRow.add(rep.getNumber());
                                oneRow.add(sdf.format(rep.getDatetime()));
                                oneRow.add(n.getName());
                                oneRow.add(rt.getQuantity());
                                oneRow.add(rt.getNewPrice());
                                oneRow.add(n.getScanCode());
                                tableData.add(oneRow);
                            }
                        }
                    }
                }

                //Inventory docs
                if (!sqlFilterNom.isEmpty()) {
                    String sql = "from Inventorytable x";
                    sql += " where" + sqlFilterNom;
                    List invs = HUtil.executeHql(sql, session);


                    if (invs != null) {
                        for (int i = 0; i < invs.size(); i++) {
                            Inventorytable it = (Inventorytable) invs.get(i);
                            Inventory inv = (Inventory) HUtil.getElement("Inventory", it.getDocumentCode());
                            if (inv != null) {
                                docs.add(inv);
                                Nomenclature n = (Nomenclature) HUtil.getElement("Nomenclature", it.getProductCode());
                                products.add(n.getCode());
                                Vector<Object> oneRow = new Vector<Object>();
                                if (inv.getActive() == 0) {
                                    oneRow.add("");
                                } else if (inv.getActive() == 1) {
                                    oneRow.add("V");
                                } else if (inv.getActive() == 2) {
                                    oneRow.add("X");
                                }
                                oneRow.add("Инвентаризация");
                                oneRow.add(inv.getNumber());
                                oneRow.add(sdf.format(inv.getDatetime()));
                                oneRow.add(n.getName());
                                oneRow.add(it.getNewQuantity());
                                oneRow.add(it.getPrice());
                                oneRow.add(n.getScanCode());
                                tableData.add(oneRow);
                            }
                        }
                    }
                }
            }
        }

        jtSearch.setModel(new MyTableModel(tableData, tableHeaders));

        Util.autoResizeColWidth(jtSearch);
        jtSearch.getColumnModel().getColumn(0).setMinWidth(60);
        jtSearch.getColumnModel().getColumn(0).setMaxWidth(60);
        jtSearch.getColumnModel().getColumn(1).setMinWidth(60);
        jtSearch.getColumnModel().getColumn(2).setMinWidth(80);
        jtSearch.getColumnModel().getColumn(3).setMinWidth(40);
        jtSearch.getColumnModel().getColumn(5).setMinWidth(50);
        jtSearch.getColumnModel().getColumn(5).setMaxWidth(50);
        jtSearch.getColumnModel().getColumn(6).setMinWidth(50);
        jtSearch.getColumnModel().getColumn(6).setMaxWidth(50);
        jtSearch.getColumnModel().getColumn(7).setMinWidth(90);
        jtSearch.getColumnModel().getColumn(7).setMaxWidth(90);

        session.close();
    }

    @Action
    public void close() {
        Util.closeJIF(this, salesView, salesView);
        Util.closeJIFTab(this, salesView);
    }

    //open the form when clicked on search results
    private void openDoc(MouseEvent evt) {
        if (evt.getClickCount() > 1) {
            int r = jtSearch.getSelectedRow();
            if (r != -1) {
                //clicked on an incoming doc
                if (docs.get(r) instanceof Incoming) {
                    IncomingDocView x =
                            new IncomingDocView(salesView, null, ((Incoming) docs.get(r)).getCode(), (Integer) products.get(r));
                    salesView.getJDesktopPane().add(x, javax.swing.JLayeredPane.DEFAULT_LAYER);
                    x.setVisible(true);
                    try {
                        x.setSelected(true);
                    } catch (java.beans.PropertyVetoException e) {
                        logger.error(e);
                    }
                //clicked on an outcoming doc
                } else if (docs.get(r) instanceof Outcoming) {
                    OutcomingDocView x =
                            new OutcomingDocView(salesView, null, ((Outcoming) docs.get(r)).getCode(), null, false, (Integer) products.get(r));
                    salesView.getJDesktopPane().add(x, javax.swing.JLayeredPane.DEFAULT_LAYER);
                    x.setVisible(true);
                    try {
                        x.setSelected(true);
                    } catch (java.beans.PropertyVetoException e) {
                        logger.error(e);
                    }

                //clicked on an repricing doc
                } else if (docs.get(r) instanceof Repricing) {
                    RepricingDocView x =
                            new RepricingDocView(salesView, null, ((Repricing) docs.get(r)).getCode(), (Integer) products.get(r));
                    salesView.getJDesktopPane().add(x, javax.swing.JLayeredPane.DEFAULT_LAYER);
                    x.setVisible(true);
                    try {
                        x.setSelected(true);
                    } catch (java.beans.PropertyVetoException e) {
                        logger.error(e);
                    }
                //clicked on an inventory doc
                } else if (docs.get(r) instanceof Inventory) {
                    InventoryDocView x =
                            new InventoryDocView(salesView, null, ((Inventory) docs.get(r)).getCode(), (Integer) products.get(r));
                    salesView.getJDesktopPane().add(x, javax.swing.JLayeredPane.DEFAULT_LAYER);
                    x.setVisible(true);
                    try {
                        x.setSelected(true);
                    } catch (java.beans.PropertyVetoException e) {
                        logger.error(e);
                    }
                }
            }
        }
    }
}