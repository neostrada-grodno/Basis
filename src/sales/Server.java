/*
 * Server.java
 *
 * Created on 07.11.2011, 10:49:31
 */
package sales;

import java.io.File;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import sales.interfaces.IClose;
import sales.util.Util;

public class Server extends javax.swing.JInternalFrame implements IClose {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());

    /** Creates new form Server */
    public Server(SalesView salesView) {
        
        initComponents();
        
        this.salesView = salesView;
        
        Util.initJIF(this, "Настройки сервера", salesView, salesView);
        
        try {
            File file =
                    new File(Util.getAppPath() + "\\sales-hibernate-configuration.cfg.xml");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(null, "Файл конфигурации не найден!", "Ошибка файла конфигурации", JOptionPane.ERROR_MESSAGE);
                return;
            }
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(file);
            doc.getDocumentElement().normalize();

            String url = Util.getConfItem("hibernate.connection.url", doc);
            url = url.substring(13);
            int n = url.indexOf(':');

            if (n != -1) {
                jtfServer.setText(url.substring(0, n));
            }

        } catch (Exception e) {
            logger.error(e);
            JOptionPane.showMessageDialog(null, e + "!", "Ошибка Hibernate", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfServer = new javax.swing.JTextField();
        jbClose = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getResourceMap(Server.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jtfServer.setText(resourceMap.getString("jtfServer.text")); // NOI18N
        jtfServer.setName("jtfServer"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getActionMap(Server.class, this);
        jbClose.setAction(actionMap.get("close")); // NOI18N
        jbClose.setText(resourceMap.getString("jbClose.text")); // NOI18N
        jbClose.setName("jbClose"); // NOI18N

        jbSave.setAction(actionMap.get("save")); // NOI18N
        jbSave.setText(resourceMap.getString("jbSave.text")); // NOI18N
        jbSave.setName("jbSave"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfServer, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbClose)
                    .addComponent(jbSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showError(String msg) {
        JOptionPane.showMessageDialog(this, msg + "!", "Ошибка установки", JOptionPane.ERROR_MESSAGE);
    }

    @Action
    public void save() {
        try {

            File confFile = new File((Util.getAppPath() + "\\sales-hibernate-configuration.cfg.xml"));

            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setValidating(false);
            DocumentBuilder builder = dbf.newDocumentBuilder();
            Document doc = builder.parse(confFile);

            boolean found = false;
            Node node = null;
            NodeList nodeList = doc.getElementsByTagName("property");
            for (int i = 0; i < nodeList.getLength(); i++) {
                node = nodeList.item(i);
                NamedNodeMap attrs = nodeList.item(i).getAttributes();
                if (attrs != null) {
                    Node attrNode = attrs.getNamedItem("name");
                    if (attrNode != null) {
                        if (attrNode.getTextContent().equals("hibernate.connection.url")) {
                            found = true;
                            break;
                        }
                    }
                }
            }

            if (found) {
                node.setTextContent(
                        "jdbc:mysql://" + jtfServer.getText() + ":3306/sales?useUnicode=true&characterEncoding=UTF-8");
            } else {
                showError("Неверный файл sales-hibernate-configuration.cfg.xml");
            }

            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer t = tf.newTransformer();
            t.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, "hibernate-configuration-3.0.dtd");
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(confFile);
            t.transform(source, result);

            JOptionPane.showMessageDialog(this, "При изменении сервера необходим перезапуск прогаммы!", "Перезапуск", JOptionPane.YES_NO_CANCEL_OPTION);

            Runtime.getRuntime().addShutdownHook(
                    new RunNewInstanceHook(
                    "javaw", "-jar",
                    Util.getAppPath() + "\\Sales.jar"));
            System.exit(0);

        } catch (Exception e) {
            logger.error(e);
        }

    }

    private static class RunNewInstanceHook extends Thread {

        private String[] commands;

        public RunNewInstanceHook(String... args) {
            commands = args;
        }

        @Override
        public void run() {
            try {
                (new ProcessBuilder()).command(commands).start();
            } catch (IOException e) {
                logger.error(e);
            }
        }
    }

    @Action
    public void close() {
        Util.closeJIF(this, salesView, salesView);
        Util.closeJIFTab(this, salesView);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbSave;
    private javax.swing.JTextField jtfServer;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;
}
