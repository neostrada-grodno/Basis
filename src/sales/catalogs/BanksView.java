package sales.catalogs;

import java.io.File;
import java.util.List;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import org.apache.log4j.Logger;
import org.hibernate.classic.Session;
import org.jdesktop.application.Action;
import org.jopendocument.dom.spreadsheet.Sheet;
import org.jopendocument.dom.spreadsheet.SpreadSheet;
import sales.SalesApp;
import sales.interfaces.IBankView;
import sales.SalesView;
import sales.entity.Banks;
import sales.entity.Contractors;
import sales.interfaces.IClose;
import sales.interfaces.IJournal;
import sales.util.HUtil;
import sales.util.Util;

public class BanksView extends javax.swing.JInternalFrame implements IClose, IJournal {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());

    /** Creates new form BanksView */
    public BanksView(SalesView salesView, IBankView parent) {
        initComponents();

        Util.initJIF(this, "Журнал банков", parent, salesView);
        Util.initJTable(jtBanks);

        filter = "";

        this.salesView = salesView;
        this.parent = parent;
        trash = false;

        if (parent == null) {
            jbOK.setVisible(false);
        }

        showTable();

        Util.setMoveRight(jtBanks);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfFilter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtBanks = new javax.swing.JTable();
        jbAdd = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jbTrash = new javax.swing.JButton();
        jbOK = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getResourceMap(BanksView.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jtfFilter.setText(resourceMap.getString("jtfFilter.text")); // NOI18N
        jtfFilter.setName("jtfFilter"); // NOI18N
        jtfFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfFilterKeyReleased(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jtBanks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtBanks.setFillsViewportHeight(true);
        jtBanks.setName("jtBanks"); // NOI18N
        jtBanks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtBanksMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtBanks);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getActionMap(BanksView.class, this);
        jbAdd.setAction(actionMap.get("addItem")); // NOI18N
        jbAdd.setText(resourceMap.getString("jbAdd.text")); // NOI18N
        jbAdd.setName("jbAdd"); // NOI18N

        jbDelete.setAction(actionMap.get("deleteItem")); // NOI18N
        jbDelete.setText(resourceMap.getString("jbDelete.text")); // NOI18N
        jbDelete.setName("jbDelete"); // NOI18N

        jbTrash.setAction(actionMap.get("showTrash")); // NOI18N
        jbTrash.setText(resourceMap.getString("jbTrash.text")); // NOI18N
        jbTrash.setName("jbTrash"); // NOI18N

        jbOK.setAction(actionMap.get("OK")); // NOI18N
        jbOK.setText(resourceMap.getString("jbOK.text")); // NOI18N
        jbOK.setName("jbOK"); // NOI18N

        jbClose.setAction(actionMap.get("closeCat")); // NOI18N
        jbClose.setText(resourceMap.getString("jbClose.text")); // NOI18N
        jbClose.setName("jbClose"); // NOI18N

        jButton1.setAction(actionMap.get("importBanks")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbTrash)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(73, 73, 73)
                        .addComponent(jbOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAdd)
                    .addComponent(jbDelete)
                    .addComponent(jbTrash)
                    .addComponent(jbClose)
                    .addComponent(jbOK)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtBanksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtBanksMouseClicked
        if (evt.getClickCount() > 1) {
            if (jtBanks.columnAtPoint(evt.getPoint()) == 0 && parent != null) {
                OK();
            } else {
                openEl();
            }
        }
    }//GEN-LAST:event_jtBanksMouseClicked

private void jtfFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfFilterKeyReleased
    filter = Util.getFilter(jtfFilter.getText(), new String[]{"name", "address", "bankCode", "unt"});
    showTable();
}//GEN-LAST:event_jtfFilterKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbTrash;
    private javax.swing.JTable jtBanks;
    private javax.swing.JTextField jtfFilter;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;
    private IBankView parent;
    private String filter;
    private boolean trash;
    private List table;

    private class MyTableModel extends DefaultTableModel {

        public MyTableModel(Vector table, Vector header) {
            super(table, header);
        }

        @Override
        public boolean isCellEditable(int r, int c) {
            return false;
        }
    }

    public void showTable() {
        Session session = HUtil.getSession();
        String delStr = "x.active = 0";
        if (trash) {
            delStr = "x.active = 2";
        }
        table = HUtil.executeHql("from Banks x where " + delStr + filter + " order by x.code");
        session.close();
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Код");
        tableHeaders.add("Наименование");
        tableHeaders.add("Адрес");
        tableHeaders.add("Код банка");
        tableHeaders.add("УНН");

        if (table != null) {
            for (int i = 0; i < table.size(); i++) {
                Banks b = (Banks) table.get(i);
                Vector<Object> oneRow = new Vector<Object>();
                oneRow.add(b.getCode());
                oneRow.add(b.getName());
                oneRow.add(b.getAddress());
                oneRow.add(b.getBankCode());
                oneRow.add(b.getUnt());
                tableData.add(oneRow);
            }
        }

        jtBanks.setModel(new MyTableModel(tableData, tableHeaders));
        Util.autoResizeColWidth(jtBanks);
        jtBanks.getColumnModel().getColumn(0).setMinWidth(40);
        jtBanks.getColumnModel().getColumn(0).setMaxWidth(40);
        jtBanks.getColumnModel().getColumn(1).setMinWidth(200);
        jtBanks.getColumnModel().getColumn(2).setMinWidth(200);
        jtBanks.getColumnModel().getColumn(3).setMinWidth(60);
        jtBanks.getColumnModel().getColumn(4).setMinWidth(60);

        /*       jtBanks.getModel().addTableModelListener(new TableModelListener() {
        
        @Override
        public void tableChanged(TableModelEvent e) {
        int r = e.getFirstRow();
        int c = e.getColumn();
        updateTable(r, c);
        showTable();
        Util.moveCell(r, c, jtBanks);
        }
        });
         */
    }
    /*
    public void updateTable(Integer r, Integer c) {
    Integer id = new Integer(jtBanks.getValueAt(r, 0).toString());
    try {
    Session session = HUtil.getSession();
    session.beginTransaction();
    Contractors cs = (Contractors) session.get(Contractors.class, id);
    if (c == 1) {
    cs.setName(jtBanks.getValueAt(r, 1).toString());
    }
    if (c == 2) {
    cs.setAddress(jtBanks.getValueAt(r, 2).toString());
    }
    if (c == 3) {
    cs.setEmail(jtBanks.getValueAt(r, 3).toString());
    }
    if (c == 4) {
    cs.setAccount(jtBanks.getValueAt(r, 4).toString());
    }
    if (c == 5) {
    cs.setUnt(jtBanks.getValueAt(r, 5).toString());
    }
    if (c == 6) {
    cs.setContractNumber(jtBanks.getValueAt(r, 6).toString());
    }
    if (c == 7) {
    cs.setContractDate((Date) jtBanks.getValueAt(r, 7));
    }
    session.update(cs);
    session.getTransaction().commit();
    session.close();
    } catch (Exception e) {
    logger.error(e);
    }
    
    }
     */

    @Action
    public void addItem() {
        JInternalFrame doc = new BanksElView(salesView, this, null);
        salesView.getJDesktopPane().add(doc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        doc.setVisible(true);
        try {
            doc.setSelected(true);
        } catch (Exception e) {
            logger.error(e);
        }
    }

    @Action
    public void deleteItem() {
        if (!trash) {
            int r = jtBanks.getSelectedRow();
            if (r != -1) {
                int a = JOptionPane.showOptionDialog(
                        this, "Удалить элемент " + ((Banks) table.get(r)).getName() + "?", "Удаление", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, new Object[]{
                            "Да", "Нет"}, "Нет");
                if (a == 0) {
                    changeDelStatus(2, r);
                }
            }
        } else {
            int r = jtBanks.getSelectedRow();
            if (r != -1) {
                int a = JOptionPane.showOptionDialog(
                        this, "Восстановить элемент " + ((Contractors) table.get(r)).getName() + " из корзины?", "Восстановление", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, new Object[]{
                            "Да", "Нет"}, "Нет");
                if (a == 0) {
                    changeDelStatus(0, r);
                }
            }
        }

    }

    @Action
    public void OK() {
        TableCellEditor tce = jtBanks.getCellEditor();
        if (tce != null) {
            tce.stopCellEditing();
        }
        if (parent != null && jtBanks.getSelectedRow() != -1) {
            parent.changeBank(((Banks) table.get(jtBanks.getSelectedRow())).getCode());
        }
        closeCat();
    }

    public void close() {
    }

    @Action
    public void closeCat() {
        Util.closeJIF(this, parent, salesView);
        Util.closeJIFTab(this, salesView);
    }

    private void changeDelStatus(int status, int r) {
        try {
            Session session = HUtil.getSession();
            session.beginTransaction();
            Banks el = (Banks) HUtil.getElement("Banks", ((Banks) table.get(r)).getCode(), session);
            if (el != null) {
                el.setActive(status);
                session.save(el);
            }
            session.getTransaction().commit();
            session.close();
        } catch (Exception e) {
            logger.error(e);
        }
        showTable();
    }

    @Action
    public void showTrash() {
        if (!trash) {
            jbDelete.setText("Восстановить");
            jbTrash.setText("Журнал");
            trash = true;

        } else {
            jbDelete.setText("Удалить");
            jbTrash.setText("Корзина");
            trash = false;
        }
        showTable();
    }

    private void openEl() {
        int r = jtBanks.getSelectedRow();
        if (r != -1) {
            JInternalFrame doc =
                    new BanksElView(salesView, this, ((Banks) table.get(r)).getCode());
            salesView.getJDesktopPane().add(doc, javax.swing.JLayeredPane.DEFAULT_LAYER);
            doc.setVisible(true);
            try {
                doc.setSelected(true);
            } catch (Exception e) {
                logger.error(e);
            }
        }
    }

    @Action
    public void importBanks() {
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);
                Session session = HUtil.getSession();
                int a = JOptionPane.showOptionDialog(
                        this, "Очистить справочник банков?", "Импорт", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет", "Отмена"}, "Нет");
                if (a == 2) {
                    return;
                }
                if (a == 0) {
                    session.createSQLQuery("truncate table banks").executeUpdate();
                }

                session.beginTransaction();
                for (int j = 1; j < sheet.getRowCount(); j++) {
                    String name = sheet.getCellAt("B" + (j + 1)).getTextValue();
                    if (!name.equals("")) {
                        Banks b = new Banks();
                        b.setName(name);
                        b.setAddress(sheet.getCellAt("C" + (j + 1)).getTextValue());
                        b.setUnt(sheet.getCellAt("D" + (j + 1)).getTextValue());
                        b.setBankCode(sheet.getCellAt("A" + (j + 1)).getTextValue());
                        session.save(b);
                    }
                }
                session.getTransaction().commit();
                session.close();
            } catch (Exception e) {
                logger.error(e);
            }
        }
        showTable();
    }
}
