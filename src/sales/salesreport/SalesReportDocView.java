/*
 * SalesReportView.java
 *
 * Created on 07.05.2011, 14:59:59
 */
package sales.salesreport;

import com.toedter.calendar.JDateChooser;
import java.io.File;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.hibernate.classic.Session;
import org.jdesktop.application.Action;
import org.jopendocument.dom.spreadsheet.Sheet;
import org.jopendocument.dom.spreadsheet.SpreadSheet;
import sales.auxiliarly.AppStartUpPath;
import sales.SalesApp;
import sales.SalesView;
import sales.entity.Register;
import sales.entity.Salesreport;
import sales.interfaces.IClose;
import sales.interfaces.IHashAndSave;
import sales.util.HUtil;
import sales.util.Util;
import sales.util.fwNumber;

public class SalesReportDocView extends JInternalFrame implements IHashAndSave, IClose {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());

    public SalesReportDocView(SalesView salesView, SalesReportView salesReportView, Integer documentCode) {
        initComponents();

        Util.initJIF(this, "Товарный отчет", salesReportView, salesView);

        this.salesView = salesView;
        this.salesReportView = salesReportView;
        this.documentCode = documentCode;

        Session session = HUtil.getSession();
        if (documentCode != null) {
            Salesreport sr = (Salesreport) HUtil.getSession().load(Salesreport.class, documentCode);
            jtfNumber.setText(sr.getNumber());
            date = new JDateChooser(sr.getDatetime());
            date1 = new JDateChooser(sr.getDate1());
            date2 = new JDateChooser(sr.getDate2());
            lock = sr.getLocked();
            if (lock == 1) {
                JOptionPane.showMessageDialog(
                        this,
                        "Элемент редактируется другим пользователем и будет открыт только для просмотра!",
                        "Блокировка", JOptionPane.PLAIN_MESSAGE);
                jtfNumber.setEditable(false);
                date.setEnabled(false);
                date1.setEnabled(false);
                date2.setEnabled(false);
                jbSave.setEnabled(false);
            } else {
                session.beginTransaction();
                sr.setLocked(1);
                session.merge(sr);
                session.getTransaction().commit();
            }

        } else {
            jtfNumber.setText(HUtil.getNextDocNumber("Salesreport", "", session));
            Calendar cl = Calendar.getInstance();
            date = new JDateChooser(cl.getTime());
            if (cl.get(Calendar.DATE) < 11) {
                cl.set(Calendar.DATE, 1);
                date1 = new JDateChooser(cl.getTime());
                cl.set(Calendar.DATE, 10);
                date2 = new JDateChooser(cl.getTime());
            } else {
                if (cl.get(Calendar.DATE) < 21) {
                    cl.set(Calendar.DATE, 11);
                    date1 = new JDateChooser(cl.getTime());
                    cl.set(Calendar.DATE, 20);
                    date2 = new JDateChooser(cl.getTime());
                } else {
                    cl.set(Calendar.DATE, 21);
                    date1 = new JDateChooser(cl.getTime());
                    cl.set(Calendar.DATE, cl.getActualMaximum(Calendar.DATE));
                    date2 = new JDateChooser(cl.getTime());
                }
            }
            lock = 0;
        }
        session.close();

        GroupLayout gl = (GroupLayout) jpDate.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(date)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(date)));

        gl = (GroupLayout) jpDate1.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(date1)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(date1)));

        gl = (GroupLayout) jpDate2.getLayout();
        gl.setHorizontalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(date2)));
        gl.setVerticalGroup(gl.createParallelGroup().addGroup(gl.createSequentialGroup().addComponent(date2)));

        if (documentCode != null) {
            hash = Util.hash(this);
        } else {
            hash = null;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jpDate = new javax.swing.JPanel();
        jbSave = new javax.swing.JButton();
        jpDate2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jpDate1 = new javax.swing.JPanel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getResourceMap(SalesReportDocView.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(124, 10));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(400, 150));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getActionMap(SalesReportDocView.class, this);
        jbPrint.setAction(actionMap.get("printSalesReport")); // NOI18N
        jbPrint.setText(resourceMap.getString("jbPrint.text")); // NOI18N
        jbPrint.setName("jbPrint"); // NOI18N

        jbCancel.setAction(actionMap.get("closeDoc")); // NOI18N
        jbCancel.setText(resourceMap.getString("jbCancel.text")); // NOI18N
        jbCancel.setName("jbCancel"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jtfNumber.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jtfNumber.setText(resourceMap.getString("jtfNumber.text")); // NOI18N
        jtfNumber.setName("jtfNumber"); // NOI18N

        jpDate.setBackground(resourceMap.getColor("jpDate.background")); // NOI18N
        jpDate.setName("jpDate"); // NOI18N

        javax.swing.GroupLayout jpDateLayout = new javax.swing.GroupLayout(jpDate);
        jpDate.setLayout(jpDateLayout);
        jpDateLayout.setHorizontalGroup(
            jpDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jpDateLayout.setVerticalGroup(
            jpDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jbSave.setText(resourceMap.getString("jbSave.text")); // NOI18N
        jbSave.setName("jbSave"); // NOI18N
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });

        jpDate2.setBackground(resourceMap.getColor("jpDate2.background")); // NOI18N
        jpDate2.setName("jpDate2"); // NOI18N

        javax.swing.GroupLayout jpDate2Layout = new javax.swing.GroupLayout(jpDate2);
        jpDate2.setLayout(jpDate2Layout);
        jpDate2Layout.setHorizontalGroup(
            jpDate2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 103, Short.MAX_VALUE)
        );
        jpDate2Layout.setVerticalGroup(
            jpDate2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jpDate1.setBackground(resourceMap.getColor("jpDate1.background")); // NOI18N
        jpDate1.setName("jpDate1"); // NOI18N

        javax.swing.GroupLayout jpDate1Layout = new javax.swing.GroupLayout(jpDate1);
        jpDate1.setLayout(jpDate1Layout);
        jpDate1Layout.setHorizontalGroup(
            jpDate1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
        );
        jpDate1Layout.setVerticalGroup(
            jpDate1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 21, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jpDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpDate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jbPrint)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jtfNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jpDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jtfNumber)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpDate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpDate2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSave, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancel)
                    .addComponent(jbPrint))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        save();
        Util.closeJIF(this, salesReportView, salesView);
        Util.closeJIFTab(this, salesView);
    }//GEN-LAST:event_jbSaveActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbPrint;
    private javax.swing.JButton jbSave;
    private javax.swing.JPanel jpDate;
    private javax.swing.JPanel jpDate1;
    private javax.swing.JPanel jpDate2;
    private javax.swing.JTextField jtfNumber;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;
    private SalesReportView salesReportView;
    private Integer documentCode;
    private JDateChooser date;
    private JDateChooser date1;
    private JDateChooser date2;
    private int nl;//number of lines
    private int numDocs;//number of documents
    private Integer lock;
    private Integer hash;

    private Long printOutTNs(int offset, Sheet sheet) {

        Long amount = new Long(0);

        Session session = HUtil.getSession();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");
        String hql =
                "select o.datetime, o.tnnumber, sum(op.amount), op.datetime"
                + " from Outcomingpayments op, Outcoming o"
                + " where o.code = op.documentCode"
                + " and o.documentType = 0"
                + " and o.active = 1"
                + " and DATE(op.datetime) >= '" + sdf.format(date1.getDate()) + "'"
                + " and DATE(op.datetime) <= '" + sdf.format(date2.getDate()) + "'"
                + " group by o.tnnumber";
        List res = session.createQuery(hql).list();
        int ts = res.size();
        if (ts > 1) {
            sheet.duplicateRows(offset - 1 + nl, 1, ts - 1);
        }
        for (int j = 0; j < ts; j++) {
            Object[] row = (Object[]) res.get(j);
            if (j > 0) {
                sheet.getCellAt("A" + (offset + nl + j)).setValue("");
            }
            sheet.getCellAt("B" + (offset + nl + j)).setValue(sdfd.format(row[0]));
            sheet.getCellAt("C" + (offset + nl + j)).setValue(row[1]);
            sheet.getCellAt("D" + (offset + nl + j)).setValue(row[2]);
            if (row[3] != null) {
                sheet.getCellAt("F" + (offset + nl + j)).setValue("Оплачено " + sdfd.format((Timestamp) row[3]));
            }
            amount += new Long(row[2].toString());
        }
        numDocs += ts;
        if (ts > 1) {
            nl += ts - 1;
        }

        return amount;
    }

    private Long printTerminalDocs(int offset, Sheet sheet) {

        Long amount = new Long(0);

        Session session = HUtil.getSession();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");
        String hql =
                "select o.datetime, o.number, sum(ot.amount)"
                + " from Outcomingtable ot, Outcoming o"
                + " where o.code = ot.documentCode"
                + " and o.documentType = 1"
                + " and o.active = 1"
                + " and DATE(o.datetime) >= '" + sdf.format(date1.getDate()) + "'"
                + " and DATE(o.datetime) <= '" + sdf.format(date2.getDate()) + "'"
                + " group by o.number";
        List res = session.createQuery(hql).list();
        int ts = res.size();
        if (ts > 1) {
            sheet.duplicateRows(offset - 1 + nl, 1, ts - 1);
        }
        for (int j = 0; j < ts; j++) {
            Object[] row = (Object[]) res.get(j);
            if (j > 0) {
                sheet.getCellAt("A" + (offset + nl + j)).setValue("");
            }
            sheet.getCellAt("B" + (offset + nl + j)).setValue(sdfd.format(row[0]));
            sheet.getCellAt("C" + (offset + nl + j)).setValue(row[1]);
            sheet.getCellAt("D" + (offset + nl + j)).setValue(row[2]);
            sheet.getCellAt("F" + (19 + nl + j)).setValue("Поступило");
            amount += new Long(row[2].toString());
        }

        numDocs += ts;

        if (ts > 1) {
            nl += ts - 1;
        }

        return amount;
    }

    private Long printRepricingDocs(int offset, String ineqSign, int sign, Sheet sheet) {
        Long amount = new Long(0);
        Session session = HUtil.getSession();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");
        String hql =
                "select r.datetime, r.number, sum(rt.changePrice)"
                + " from Repricingtable rt, Repricing r"
                + " where r.code = rt.documentCode"
                + " and r.active = 1"
                + " and (select sum(rt1.changePrice) from Repricingtable rt1 where rt1.documentCode = r.code) " + ineqSign + " 0"
                + " and DATE(r.datetime) >= '" + sdf.format(date1.getDate()) + "'"
                + " and DATE(r.datetime) <= '" + sdf.format(date2.getDate()) + "'"
                + " group by r.number";
        List res = session.createQuery(hql).list();
        int ts = res.size();
        if (ts > 1) {
            sheet.duplicateRows(offset - 1 + nl, 1, ts - 1);
        }
        for (int j = 0; j < ts; j++) {
            Object[] row = (Object[]) res.get(j);
            if (j > 0) {
                sheet.getCellAt("A" + (offset + nl + j)).setValue("");
            }
            sheet.getCellAt("B" + (offset + nl + j)).setValue(sdfd.format(row[0]));
            sheet.getCellAt("C" + (offset + nl + j)).setValue(row[1]);

            Long addAmount = new Long(row[2].toString());
            if (addAmount > 0) {
                sheet.getCellAt("D" + (offset + nl + j)).setValue(
                        new Long(row[2].toString()));
            } else {
                sheet.getCellAt("D" + (offset + nl + j)).setValue(
                        -(new Long(row[2].toString())));
            }
            amount += addAmount;
        }
        numDocs += ts;
        if (ts > 1) {
            nl += ts - 1;
        }
        return amount;
    }

    private Long printInRegisters(int offset, Sheet sheet) {
        Long amount = new Long(0);
        Session session = HUtil.getSession();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");
        String hql =
                " from Register x"
                + " where x.active = 1"
                + " and x.documentType = 0"
                + " and DATE(x.datetime) >= '" + sdf.format(date1.getDate()) + "'"
                + " and DATE(x.datetime) <= '" + sdf.format(date2.getDate()) + "'";
        List res = session.createQuery(hql).list();
        int ts = res.size();
        if (ts > 1) {
            sheet.duplicateRows(offset - 1 + nl, 1, ts - 1);
        }
        for (int j = 0; j < ts; j++) {
            if (j > 0) {
                sheet.getCellAt("A" + (offset + nl + j)).setValue("");
            }
            Register r = (Register) res.get(j);
            sheet.getCellAt("B" + (offset + nl + j)).setValue(sdfd.format(r.getDatetime()));
            sheet.getCellAt("C" + (offset + nl + j)).setValue(r.getNumber());
            sheet.getCellAt("D" + (offset + nl + j)).setValue(r.getAmount());
            amount += r.getAmount();
        }
        numDocs += ts;
        if (ts > 1) {
            nl += ts - 1;
        }
        return amount;
    }

    @Action
    public void printSalesReport() {

        Util.checkDocSaved(this);
           
        try {
            File file = new File(Util.getAppPath() + "\\templates\\SalesReport.ods");
            final Sheet sheet = SpreadSheet.createFromFile(file).getSheet(0);
            sheet.getCellAt("A2").setValue(HUtil.getConstant("name"));
            sheet.getCellAt("A5").setValue("ТОВАРНЫЙ ОТЧЁТ № " + jtfNumber.getText());
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM");
            sheet.getCellAt("C6").setValue(sdf.format(date1.getDate()) + "-" + sdf.format(date2.getDate()));
            sdf = new SimpleDateFormat("yyyy");
            sheet.getCellAt("D6").setValue(sdf.format(date1.getDate()) + " г.");
            sheet.getCellAt("C8").setValue(HUtil.getShortNameByCode(HUtil.getIntConstant("cashier")));

            sdf = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat sdfd = new SimpleDateFormat("dd.MM.yy");
            Session session = HUtil.getSession();

            sheet.getCellAt("B13").setValue(sdfd.format(date1.getDate()));

            nl = 0;
            numDocs = 0;
            
            Long inBalanceDoc = new Long(0);

            //Incoming balance
            Long inBalance = new Long(0);
            String hql =
                    "select sum(it.amount)"
                    + " from Incomingtable it, Incoming i"
                    + " where i.code = it.documentCode"
                    + " and i.active = 1"
                    + " and i.datetime < '" + sdf.format(date1.getDate()) + "'";
            List res = session.createQuery(hql).list();
            if (res.size() > 0) {
                if (res.get(0) != null) {
                    inBalance = new Long(res.get(0).toString());
                }
            }
            hql =
                    "select sum(ot.amount) "
                    + " from Outcomingtable ot, Outcoming o"
                    + " where o.code = ot.documentCode"
                    + " and o.active = 1"
                    + " and o.datetime < '" + sdf.format(date1.getDate()) + "'";
            res = session.createQuery(hql).list();
            if (res.size() > 0) {
                if (res.get(0) != null) {
                    inBalance -= new Long(res.get(0).toString());
                }
            }
            sheet.getCellAt("D13").setValue(inBalance);

            //Incoming documents
            hql =
                    "select i.datetime, i.number, sum(it.amount) from Incomingtable it, Incoming i"
                    + " where i.code = it.documentCode"
                    + " and i.active = 1"
                    + " and DATE(i.datetime) >= '" + sdf.format(date1.getDate()) + "'"
                    + " and DATE(i.datetime) <= '" + sdf.format(date2.getDate()) + "'"
                    + " group by i.number";
            res = session.createQuery(hql).list();
            Long amount = new Long(0);
            int ts = res.size();
            if (ts > 1) {
                nl += ts - 1;
                sheet.duplicateRows(13, 1, ts - 1);
            }
            for (int j = 0; j < ts; j++) {
                Object[] row = (Object[]) res.get(j);
                if (j > 0) {
                    sheet.getCellAt("A" + (14 + j)).setValue("");
                }
                sheet.getCellAt("B" + (14 + j)).setValue(sdfd.format(row[0]));
                sheet.getCellAt("C" + (14 + j)).setValue(row[1]);
                sheet.getCellAt("D" + (14 + j)).setValue(row[2]);
                amount += new Long(row[2].toString());
            }
            numDocs += ts;
            
            amount += printRepricingDocs(15, ">", 1, sheet);
            inBalance += amount;
            sheet.getCellAt("D" + (16 + nl)).setValue(amount);
            sheet.getCellAt("D" + (17 + nl)).setValue(inBalance);

            Long outBalance = new Long(0);
            outBalance += printOutTNs(18, sheet);
            outBalance += printTerminalDocs(19, sheet);
            outBalance += printInRegisters(20, sheet);
            outBalance += printRepricingDocs(21, "<", -1, sheet);

            sheet.getCellAt("D" + (22 + nl)).setValue(outBalance);
            sheet.getCellAt("D" + (23 + nl)).setValue(inBalance - outBalance);
            fwNumber ndocs = new fwNumber(numDocs);
            sheet.getCellAt("C" + (25 + nl)).setValue(ndocs.num2str(true));
            sheet.getCellAt("B" + (32 + nl)).setValue("   " + (inBalance - outBalance));

            String r = " " + Math.round(Math.random() * 100000);
            File outputFile = new File("temp\\Товарный отчет № " + jtfNumber.getText() + r + ".ods");
            sheet.getSpreadSheet().saveAs(outputFile);
            Util.openDoc("temp\\Товарный отчет № " + jtfNumber.getText() + r + ".ods");
        } catch (Exception e) {
            logger.error(e);
        }
    }

    public void close() {

        if (lock == 0) {

            save();

            Session session = HUtil.getSession();
            Salesreport x = (Salesreport) HUtil.getElement("Salesreport", documentCode, session);
            if (x != null) {
                session.beginTransaction();
                x.setLocked(0);
                session.merge(x);
                session.getTransaction().commit();
            }
            session.close();
        }
    }

    @Action
    public void closeDoc() {
        close();
        Util.closeJIF(this, salesReportView, salesView);
        Util.closeJIFTab(this, salesView);
    }

    public void save() {

        if (lock == 0) {
            if (hash == null || !hash.equals(Util.hash(this))) {
                int a = JOptionPane.showOptionDialog(
                        this, "Сохранить документ?", "Сохранение", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
                if (a == 0) {
                    try {
                        Session session = HUtil.getSession();
                        session.beginTransaction();

                        Salesreport sr = null;
                        if (documentCode != null) {
                            sr = (Salesreport) HUtil.getElement("Salesreport", documentCode, session);
                        }
                        if (sr == null) {
                            sr = new Salesreport();
                        }
                        sr.setDatetime(date.getDate());
                        sr.setDate1(date1.getDate());
                        sr.setDate2(date2.getDate());
                        sr.setNumber(jtfNumber.getText());

                        if (documentCode != null) {
                            session.update(sr);
                        } else {
                            session.save(sr);
                        }
                        documentCode = sr.getCode();

                        session.getTransaction().commit();
                        session.close();

                        Util.updateJournals(salesView, SalesReportView.class);
                        hash = Util.hash(this);
                    } catch (Exception e) {
                        logger.error(e);
                    }
                }
            }
        }
    }

    public Integer getHash() {
        return hash;
    }

    public Integer getHashCode() {
        return Util.hash(this);
    }
}
