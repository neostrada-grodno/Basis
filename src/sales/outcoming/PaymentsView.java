/*
 * PaymentsView.java
 *
 * Created on 23.09.2011, 16:50:42
 */
package sales.outcoming;

import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.AbstractCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import org.apache.log4j.Logger;
import org.jdesktop.application.Action;
import sales.auxiliarly.MyCellEditor;
import sales.SalesApp;
import sales.SalesView;
import sales.entity.Outcomingpayments;
import sales.interfaces.IClose;
import sales.util.Util;

public class PaymentsView extends javax.swing.JInternalFrame implements IClose {

    static Logger logger = Logger.getLogger(SalesApp.class.getName());

    /** Creates new form PaymentsView */
    public PaymentsView(SalesView salesView, TNHeader parent, Integer documentCode, List payments, Integer lock) {

        initComponents();

        this.salesView = salesView;
        this.parent = parent;
        this.documentCode = documentCode;
        this.table = payments;
        this.lock = lock;

        Util.initJIF(this, "Платежи", parent, salesView);
        Util.initJTable(jtPayments);

        jTextBox = new JTextField();
        jTextBox.addKeyListener(new KeyAdapter() {

            @Override
            public void keyTyped(KeyEvent e) {
                jTextBox.setEditable(Character.isDigit(e.getKeyChar()) || e.getKeyChar() == KeyEvent.VK_BACK_SPACE);
            }
        });

        showTable();

        Util.setMoveRight(jtPayments);
        
        hash = Util.hash(this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtPayments = new javax.swing.JTable();
        jbAdd = new javax.swing.JButton();
        jbDel = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getResourceMap(PaymentsView.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setClosable(true);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setToolTipText(resourceMap.getString("Form.toolTipText")); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jtPayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtPayments.setCellSelectionEnabled(true);
        jtPayments.setFillsViewportHeight(true);
        jtPayments.setName("jtPayments"); // NOI18N
        jScrollPane1.setViewportView(jtPayments);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sales.SalesApp.class).getContext().getActionMap(PaymentsView.class, this);
        jbAdd.setAction(actionMap.get("addPayment")); // NOI18N
        jbAdd.setText(resourceMap.getString("jbAdd.text")); // NOI18N
        jbAdd.setName("jbAdd"); // NOI18N

        jbDel.setAction(actionMap.get("delPayment")); // NOI18N
        jbDel.setText(resourceMap.getString("jbDel.text")); // NOI18N
        jbDel.setName("jbDel"); // NOI18N

        jbClose.setAction(actionMap.get("closePayments")); // NOI18N
        jbClose.setText(resourceMap.getString("jbClose.text")); // NOI18N
        jbClose.setName("jbClose"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbDel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 400, Short.MAX_VALUE)
                        .addComponent(jbClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAdd)
                    .addComponent(jbDel)
                    .addComponent(jbClose))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public void addPayment() {
        if (lock == 0) {
            Outcomingpayments op = new Outcomingpayments();
            op.setAmount(0);
            op.setDatetime(Calendar.getInstance().getTime());
            op.setNote("");
            table.add(op);
            showTable();
            jtPayments.editCellAt(jtPayments.getRowCount() - 1, 0);
        }
    }

    @Action
    public void delPayment() {
        if (lock == 0) {
            int r = jtPayments.getSelectedRow();
            if (r != -1) {
                int a = JOptionPane.showOptionDialog(
                        this, "Удалить платеж?", "Удаление", JOptionPane.YES_NO_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Да", "Нет"}, "Да");
                if (a == 0) {
                    table.remove(r);
                    showTable();
                }
            }
        }
    }

    @Action
    public void closePayments() {
        close();
        Util.closeJIF(this, parent, salesView);
        Util.closeJIFTab(this, salesView);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbDel;
    private javax.swing.JTable jtPayments;
    // End of variables declaration//GEN-END:variables
    private SalesView salesView;
    private TNHeader parent;
    private Integer documentCode;
    private List table;
    private SimpleDateFormat sdf;
    private JTextField jTextBox;
    Integer hash;
    Integer lock;

    private class DateCellRenderer extends DefaultTableCellRenderer {

        public DateCellRenderer() {
            super();
            sdf = new SimpleDateFormat("dd.MM.yy");
        }

        @Override
        public void setValue(Object value) {
            setText((value == null) ? "" : sdf.format(value));
        }
    }

    private class DateCellEditor extends AbstractCellEditor implements TableCellEditor {

        private JDateChooser theSpinner;
        protected Object value;

        public DateCellEditor() {
            theSpinner = new JDateChooser();
            theSpinner.setDateFormatString("dd.MM.yyyy");
            theSpinner.setOpaque(true);
        }

        @Override
        public Object getCellEditorValue() {
            return theSpinner.getDate();
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            if (value == null) {
                value = new Date();
            }

            theSpinner.setDate((Date) value);
            if (isSelected) {
                theSpinner.setBackground(table.getSelectionBackground());
            } else {
                theSpinner.setBackground(table.getBackground());
            }
            return theSpinner;
        }
    }

    private void showTable() {
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Дата");
        tableHeaders.add("Сумма");
        tableHeaders.add("№ документа");
        tableHeaders.add("Примечание");

        for (int i = 0; i < table.size(); i++) {
            Outcomingpayments p = (Outcomingpayments) table.get(i);
            Vector oneRow = new Vector();
            oneRow.add(p.getDatetime());
            oneRow.add(p.getAmount());
            oneRow.add(p.getNumber());
            oneRow.add(p.getNote());
            tableData.add(oneRow);
        }

        jtPayments.setModel(new DefaultTableModel(tableData, tableHeaders));
        Util.autoResizeColWidth(jtPayments);
        jtPayments.getColumnModel().getColumn(0).setMinWidth(90);
        jtPayments.getColumnModel().getColumn(0).setMaxWidth(90);
        jtPayments.getColumnModel().getColumn(1).setMinWidth(80);
        jtPayments.getColumnModel().getColumn(1).setMaxWidth(80);

        jtPayments.getColumnModel().getColumn(0).setCellEditor(new DateCellEditor());
        jtPayments.getColumnModel().getColumn(0).setCellRenderer(new DateCellRenderer());

        jtPayments.getColumnModel().getColumn(1).setCellEditor(new MyCellEditor(jTextBox));

        jtPayments.getModel().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == javax.swing.event.TableModelEvent.UPDATE) {
                    int c = e.getColumn();
                    int r = e.getFirstRow();
                    updateTable(r, c);
                    //showTable();
                    //Util.moveCellWithDate(r, c, jtPayments);
                }
            }
        });
    }

    private void updateTable(int r, int c) {
        Outcomingpayments op = (Outcomingpayments) table.get(r);
        if (c == 0) {
            op.setDatetime((Date) jtPayments.getValueAt(r, 0));
        } else if (c == 1) {
            op.setAmount(Integer.parseInt(jtPayments.getValueAt(r, 1).toString()));
        } else if (c == 2) {
            op.setNumber(jtPayments.getValueAt(r, 2).toString());
        } else if (c == 3) {
            op.setNote(jtPayments.getValueAt(r, 3).toString());
        }
        table.set(r, op);
    }

    private void save() {

        TableCellEditor tce = jtPayments.getCellEditor();
        if (tce != null) {
            tce.stopCellEditing();
        }
        
        if (lock == 0 && !hash.equals(Util.hash(this))) {

            parent.setPayments(table);
        }
    }

    public void close() {

        save();
    }
}