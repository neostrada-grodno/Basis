; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Базис"
#define MyAppFolder "Basis"
#define MyAppVersion "1.0"
#define MyAppPublisher "Neost"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{4A722764-57DC-4A17-9CDB-B89F875135BD}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={userpf}\{#MyAppFolder}
DefaultGroupName={#MyAppName}
OutputBaseFilename=Базис
Compression=lzma
SolidCompression=yes

[Languages]
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "D:\soft\java\jre-7u51-windows-i586.exe"; DestDir: "{tmp}"; check: noJreCheck; AfterInstall: JreInstall(ExpandConstant('{tmp}'), 'jre-7u51-windows-i586.exe'); Flags: deleteafterinstall ignoreversion
Source: "D:\soft\sql\mysql-5.5.35-win32.msi"; DestDir: "{tmp}"; check: noMySqlCheck; AfterInstall: MySqlInstall(ExpandConstant('{tmp}'), 'mysql-5.5.35-win32.msi'); Flags: deleteafterinstall ignoreversion
Source: "D:\work\Basis\my.ini"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\work\Basis\sales-hibernate-configuration.cfg.xml"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\work\Basis\sales.sql"; DestDir: "{tmp}"; AfterInstall: MySqlAfterInstall(ExpandConstant('{app}'), ExpandConstant('{tmp}')); Flags: deleteafterinstall ignoreversion
;Source: "D:\soft\text\Apache_OpenOffice_4.0.0_Win_x86_install_ru\*"; DestDir: "{tmp}"; check: noOpenOfficeCheck; Flags: deleteafterinstall ignoreversion recursesubdirs createallsubdirs
;Source: "D:\soft\text\Apache_OpenOffice_4.0.0_Win_x86_install_ru\setup.exe"; DestDir: "{tmp}"; check: noOpenOfficeCheck; AfterInstall: OpenOfficeInstall(ExpandConstant('{tmp}'), 'setup.exe'); Flags: deleteafterinstall ignoreversion
Source: "D:\work\Basis\Sales.jar"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\work\Basis\basis.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\work\Basis\ean13.ttf"; DestDir: "{win}\Fonts"; Flags: ignoreversion
Source: "D:\work\Basis\sales_log4j.properties"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\work\Basis\hibernate-configuration-3.0.dtd"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\work\Basis\lib\*"; DestDir: "{app}\lib"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\work\Basis\templates\*"; DestDir: "{app}\templates"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\work\Basis\images\*"; DestDir: "{app}\images"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{code:GetJrePath}\bin\javaw.exe"; parameters: "-splash:images\splash.gif -Djava.library.path=lib -jar Sales.jar"; WorkingDir: "{app}"; IconFilename: "{app}\basis.ico"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{code:GetJrePath}\bin\javaw.exe"; parameters: "-splash:images\splash.gif -Djava.library.path=lib -jar Sales.jar"; WorkingDir: "{app}"; Tasks: desktopicon; IconFilename: "{app}\basis.ico"
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{code:GetJrePath}\bin\javaw.exe"; parameters: "-splash:images\splash.gif -Djava.library.path=lib -jar Sales.jar"; WorkingDir: "{app}"; Tasks: quicklaunchicon; IconFilename: "{app}\basis.ico"

[Code]
function MessageBox(hWnd: Integer; lpText, lpCaption: AnsiString; uType: Cardinal): Integer;
external 'MessageBoxA@user32.dll stdcall';
const
  JRE_ROOT_KEY = 'SOFTWARE\JavaSoft\Java Runtime Environment';
  JRE_VERSION_KEY = 'CurrentVersion';
  JRE_VERSION = '1.7';
  JAVA_HOME = 'JavaHome';
  MYSQL_ROOT_KEY = 'SOFTWARE\MySQL AB';
  MYSQL_FOLDER_KEY = 'MySQL Server 5.5';
  MYSQL_VERSION_KEY = 'Version';
  MYSQL_VERSION = '5.5.34';
  MYSQL_LOCATION_KEY = 'Location';
  OO_ROOT_KEY = 'SOFTWARE\OpenOffice\OpenOffice';
  OO_VERSION = '4.0.0';
  OO_LOCATION_KEY = 'Location';
var
  noOldMySql, suitableMySql: boolean;
  confirmCancel: boolean;

procedure CancelButtonClick(CurPageID: Integer; var Cancel, Confirm: Boolean);
begin
    Confirm := confirmCancel;
end;

function InitializeSetup(): Boolean;
begin
  result := not IsWin64;
  if not result then
    MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
      'Установка предназначена для 32-битной Windows!',
      'Установка Базис',
      MB_OK)
  else
    confirmCancel := true;
end;

procedure replaceString(filename, str, rep: String; utf8: Boolean);
var
  contents: TArrayOfString;
  i: Integer;
begin
  if LoadStringsFromFile(filename, contents) then
  begin
    for i := 0 to GetArrayLength(contents) - 1 do
      StringChangeEx(contents[i], str, rep, true);
      if utf8 then
        SaveStringsToUTF8File(filename, contents, false)
      else
        SaveStringsToFile(filename, contents, false);
  end;
end;

function CompareVersions(v1, v2: String; num: Integer) : boolean;//returns true if v1 >= v2
var
  p1, p2, i: integer;
begin
  result := true;
  i := 0; 
  repeat
    p1 := Pos('.', v1);
    p2 := Pos('.', v2);
    if (p1 <> 0) and (p2 <> 0) then
    begin
      if StrToInt(Copy(v1, 1, p1 - 1)) < StrToInt(Copy(v2, 1, p2 - 1)) then
      begin
        result := false;
        Break;
      end;
      v1 := Copy(v1, p1 + 1, 99);
      v2 := Copy(v2, p2 + 1, 99);
      i := i + 1;
    end;
  until (p1 = 0) or (p2 = 0) or (i = num);
end;

function noJreCheck : boolean;
var version: String;
begin
  result := true;
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, JRE_ROOT_KEY, JRE_VERSION_KEY, version) then
    result := not CompareVersions(version, JRE_VERSION, 99);
end;

procedure JreInstall(jre_location, jre_file : String);
var
  path: String;
  code: integer;
begin
  code := -1;
  if noJreCheck then
  begin 
    path := jre_location + '\' + jre_file;
    if not exec(path, '/s', '', SW_HIDE, ewWaitUntilTerminated, code) then
    begin
      MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
      'Не удалось запустить установку Java Runtime Environment.' +
      ' Строка запуска = ' + path +
      ', код ошибки = ' + IntToStr(code),
      'Установка Базис',
      MB_OK);
      confirmCancel := false;
      WizardForm.Close;
    end;
  end;
end;

function GetJrePath(param : String) : String;
var
  version, path : String;
begin
  result := '';
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, JRE_ROOT_KEY, JRE_VERSION_KEY, version) then
    if RegQueryStringValue(HKEY_LOCAL_MACHINE, JRE_ROOT_KEY + '\' + version, JAVA_HOME, path) then
      result := path;
end;

function BoolToStr(b : Boolean) : String;
begin
  if b then result := 'true' else result := 'false';
end;

function noMySqlCheck : boolean;
var
  versions: TArrayOfString;
  i: integer;
  version: string;
begin
  suitableMySql := false;
  noOldMySql := true;
  result := true;
  if RegGetSubkeyNames(HKEY_LOCAL_MACHINE, MYSQL_ROOT_KEY, versions) then
  begin
    for i := 0 to GetArrayLength(versions) - 1 do
      if RegQueryStringValue(HKEY_LOCAL_MACHINE, MYSQL_ROOT_KEY + '\' + versions[i], MYSQL_VERSION_KEY, version) then
        if CompareVersions(version, MYSQL_VERSION, 2) then
        begin
          suitableMySql := true;
          result := false;
          break;
        end
        else noOldMySql := false;
   end;
end;

procedure MySqlInstall(mysql_location, mysql_file : String);
var
  code: integer;
begin
  if not exec('msiexec', '/passive /i ' + mysql_file, mysql_location, SW_HIDE, ewWaitUntilTerminated, code) then
  begin
    MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
    'Не удалось установить MySQL. Код ошибки: ' +
    IntToStr(code),
    'Установка Базис',
    MB_OK);
    confirmCancel := false;
    WizardForm.Close;
  end;
end;

function MySqlServiceInstall(appFolder: String) : boolean;
var
  path: String;
  code: integer;
begin
  result := true;
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, MYSQL_ROOT_KEY + '\' + MYSQL_FOLDER_KEY, MYSQL_LOCATION_KEY, path) then
  begin
    MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
       'Не найден MySQL.' +
        ' Путь = ' + path +
        ', код ошибки = ' + IntToStr(code),
        'Установка Базис',
        MB_OK);
    confirmCancel := false;
    WizardForm.Close;
    result := false;
    Exit;
  end else
  begin
    if noOldMySql then
    begin
      if not exec(path + 'bin\mysqld.exe', '--install', '', SW_HIDE, ewWaitUntilTerminated, code) then
      begin
        MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
         'Ошибка установки сервиса MySQL.' +
          ' Cтрока запуска = ' + path +
          ', код ошибки = ' + IntToStr(code),
          'Установка Базис',
          MB_OK);
        confirmCancel := false;
        WizardForm.Close;
        result := false;
        Exit;
      end;
      if not exec('net', 'start MySQL', '', SW_HIDE, ewWaitUntilTerminated, code) then
        begin
          MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
           'Не удалось запустить сервис MySQL.' +
            ', Код ошибки = ' + IntToStr(code),
            'Установка Базис',
            MB_OK);
          confirmCancel := false;
          WizardForm.Close;
          result := false;
          Exit;
        end;
    end
    else
    begin
      replaceString(appFolder + '\sales-hibernate-configuration.cfg.xml', '3306', '3307', true);
      replaceString(appFolder + '\my.ini', '%MySQLPath%', path, false);
      if not exec(path + 'bin\mysqld.exe', '--install MySQLSales --defaults-file="' + appFolder + '\my.ini"', '', SW_HIDE, ewWaitUntilTerminated, code) then
      begin
        MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
         'Ошибка установки сервиса MySQL (MySQLSales).' +
          ' Cтрока запуска = ' + path +
          ', код ошибки = ' + IntToStr(code),
          'Установка Базис',
          MB_OK);
        confirmCancel := false;
        WizardForm.Close;
        result := false;
        Exit;
      end;
      if not exec('net', 'start MySQLSales', '', SW_HIDE, ewWaitUntilTerminated, code) then
        begin
          MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
           'Не удалось запустить сервис MySQL (MySQLSales).' +
            ', Код ошибки = ' + IntToStr(code),
            'Установка Базис',
            MB_OK);
          confirmCancel := false;
          WizardForm.Close;
          result := false;
          Exit;
        end;
    end;
  end;
end;

procedure DbInstall(tmp, sql_file : String);
var
  path, portStr, params: String;
  code: Integer;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE, MYSQL_ROOT_KEY + '\' + MYSQL_FOLDER_KEY, MYSQL_LOCATION_KEY, path) then
  begin
    MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
       'Не найден MySQL.' +
        ' Строка запуска = ' + path +
        ', код ошибки = ' + IntToStr(code),
        'Установка Базис',
        MB_OK);
    confirmCancel := false;
    WizardForm.Close;
  end else
  if noOldMySql then
    portStr := ''
  else
    portStr := '-P 3307 ';
    params := '-u root ' + portStr + '-e "source ' + sql_file + '"';
  if not exec(path + 'bin\mysql.exe', params, tmp, SW_HIDE, ewWaitUntilTerminated, code) then
  begin
    MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
     'Ошибка установки MySQL.' +
      ' Строка запуска = ' + path + 'bin\mysql.exe' + ' ' + params +
      ', код ошибки = ' + IntToStr(code),
      'Установка Базис',
      MB_OK);
    confirmCancel := false;
    WizardForm.Close;
  end;
end;

procedure MySqlAfterInstall(appFolder, tmp: String);
begin
  if MySqlServiceInstall(appFolder) then
    DbInstall(tmp, 'sales.sql');
end;

function noOpenOfficeCheck : boolean;
var
  versions: TArrayOfString;
  i: integer;
begin
  result := true;
  if RegGetSubkeyNames(HKEY_LOCAL_MACHINE, OO_ROOT_KEY, versions) then
  begin
    for i := 0 to GetArrayLength(versions) - 1 do
    begin
      if CompareVersions(versions[i], OO_VERSION, 99) then
      begin
        result := false;
        break;
      end;
    end;
  end
end;

procedure OpenOfficeInstall(oo_location, oo_file : String);
var path: String;
    code: integer;
begin
  code := -1;
  path := oo_location + '\' + oo_file;
  if not exec(path, '/qn', '', SW_HIDE, ewWaitUntilTerminated, code) then
    begin
    MessageBox(StrToInt(ExpandConstant('{wizardhwnd}')),
     'Не удалось установить OpenOffice.' +
      ' Строка запуска = ' + path +
      ', код ошибки = ' + IntToStr(code),
      'Установка Базис',
      MB_OK);
      confirmCancel := false;
      WizardForm.Close;
    end;
end;